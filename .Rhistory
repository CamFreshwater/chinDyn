life_history = case_when(
grepl("sub", group) ~ "subyearling",
TRUE ~ "yearling"
)#,
#group = fct_relevel(as.factor(group), "North\nYearling",
# "SoG\nSubyearling", "Puget\nYearling",
# "Puget\nSubyearling", "South\nSubyearling"),
# var = fct_relevel(as.factor(var), "Juvenile M", "Mean Age")
) %>%
glimpse()
unique(trends$group)
trends <- rbind(surv_trends, gen_trends) %>%
mutate(var = as.factor(var),
trend = as.factor(trend),
life_history = case_when(
grepl("sub", group) ~ "subyearling",
TRUE ~ "yearling"
),
group = fct_relevel(as.factor(group), "North\nYearling",
"SoG\nSubyearling", "Puget\nYearling",
"Puget\nSubyearling", "South\nSubyearling"),
var = fct_relevel(as.factor(var), "Juvenile M", "Mean Age")
)
plot_one_trend(trends %>% filter(trend == "Trend 1"))
trends <- rbind(surv_trends, gen_trends) %>%
mutate(var = as.factor(var),
trend = as.factor(trend),
life_history = case_when(
grepl("Sub", group) ~ "subyearling",
TRUE ~ "yearling"
),
group = fct_relevel(as.factor(group), "North\nYearling",
"SoG\nSubyearling", "Puget\nYearling",
"Puget\nSubyearling", "South\nSubyearling"),
var = fct_relevel(as.factor(var), "Juvenile M", "Mean Age")
)
plot_one_trend(trends %>% filter(trend == "Trend 1"))
pdf(here::here("figs", "trends_both_vars.pdf"), height = 7, width = 4)
plot_one_trend(trends %>% filter(trend == "Trend 1"))
plot_one_trend(trends %>% filter(trend == "Trend 2"))
dev.off()
# pull pars
pull_par_f <- function(x, group) {
as_tibble(x$samples, rownames = "iterations") %>%
pivot_longer(cols = -iterations,
names_sep = "\\.",
names_to = c("chains", "parameter")) %>%
filter(grepl("psi", parameter) | grepl("phi", parameter) |
grepl("nu", parameter)) %>%
mutate(group = group,
trend = case_when(
grepl("nu", parameter) ~ "Trend 1 and 2",
grepl("[1]", parameter) ~ "Trend 1",
grepl("[2]", parameter) ~ "Trend 2"
),
parameter = case_when(
grepl("psi", parameter) ~ "psi",
grepl("phi", parameter) ~ "phi",
grepl("nu", parameter) ~ "nu",
TRUE ~ parameter
),
y_int = ifelse(parameter == "nu", 10, 0))
}
# survival pars
surv_pars <- map2(surv_dfa, group_labs, pull_par_f) %>%
bind_rows()
surv_par_plot <-  ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(aes(yintercept = y_int), lty = 2) +
coord_flip() +
ylab("Posterior Estimates from Mortality Model") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_pars <- map2(gen_dfa, group_labs, pull_par_f) %>%
bind_rows()
pdf(here::here("figs", "pars_both_vars.pdf"))
surv_par_plot
gen_par_plot
dev.off()
gen_par_plot <- ggplot(gen_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(aes(yintercept = y_int), lty = 2) +
coord_flip() +
ylab("Posterior Estimates from Mean Age Model") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_par_plot <- ggplot(gen_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(aes(yintercept = y_int), lty = 2) +
coord_flip() +
ylab("Posterior Estimates from Mean Age Model") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
pdf(here::here("figs", "pars_both_vars.pdf"))
surv_par_plot
gen_par_plot
dev.off()
dev.off()
dev.off()
pdf(here::here("figs", "pars_both_vars.pdf"))
surv_par_plot
gen_par_plot
dev.off()
gen_dfa <- map(gen_tbl$group, function(y) {
f_name <- paste(y, "one-trend", "bayesdfa_c.RDS", sep = "_")
# f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
readRDS(here::here("data", "generation_fits", f_name))
})
# predicted survival fits
surv_pred_list <- pmap(list(surv_dfa, surv_tbl$names, surv_tbl$years),
fitted_preds,
descend_order = TRUE)
# make one version with a legend to use in panel fig
leg_plot <- plot_fitted_pred(surv_pred_list[[1]], col_ramp = col_ramp_surv,
facet_col = 5,
leg_name = "5-year Mean of Centered Juvenile M") +
theme(legend.position = "top")
# scale colors based on observed range over entire dataset
col_ramp_surv <- surv_pred_list %>%
bind_rows() %>%
pull(last_mean) %>%
range() %>%
abs() %>%
max() * c(-1, 1)
# predicted gen length fits
gen_pred_list <- pmap(list(gen_dfa, gen_tbl$names, gen_tbl$years),
fitted_preds,
descend_order = FALSE)
gen_fit <- map2(gen_pred_list, x_axes, .f = function(x, y) {
plot_fitted_pred(x, print_x = y,
col_ramp = col_ramp_gen, facet_col = 5,
col_ramp_direction = 1) +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1))
})
# scale colors based on observed range over entire dataset
col_ramp_gen <- gen_pred_list %>%
bind_rows() %>%
pull(last_mean) %>%
range() %>%
abs() %>%
max() * c(-1, 1)
gen_fit_panel <- cowplot::plot_grid(
gen_fit[[1]], gen_fit[[2]], gen_fit[[3]], gen_fit[[4]], gen_fit[[5]],
axis = c("r"), align = "v",
rel_heights = c(2/11, 3/11, 1/11, 2/11, 3/11),
ncol=1
) %>%
arrangeGrob(.,
left = textGrob("Centered Mean Age",
gp = gpar(col = "grey30", fontsize = 12),
rot = 90)) %>%
grid.arrange()
library(tidyverse)
library(bayesdfa)
library(grid)
library(gridExtra)
# import juvenile mortality data
surv_tbl <- readRDS(here::here("data", "mortality_fits", "surv_tbl.RDS"))
surv_dfa <- map(surv_tbl$group, function(y) {
f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
# f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
readRDS(here::here("data", "mortality_fits", f_name))
})
# import mean gen length
gen_tbl <- readRDS(here::here("data", "generation_fits", "gen_tbl.RDS"))
gen_dfa <- map(gen_tbl$group, function(y) {
f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
# f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
readRDS(here::here("data", "generation_fits", f_name))
})
rstan::extrac(gen_dfa[[1]]$model)$sigma
rstan::extract(gen_dfa[[1]]$model)$sigma
rstan::extract(gen_dfa[[1]]$model)$sigma %>% dims
rstan::extract(gen_dfa[[1]]$model)$sigma %>% dim
names(gen_dfa[[1]]$model)
# read outputs
dfa_fits <- map(gen_tbl$group, function(y) {
f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
readRDS(here::here("data", "generation_fits", f_name))
})
library(tidyverse)
library(bayesdfa)
library(grid)
library(gridExtra)
# import juvenile mortality data
surv_tbl <- readRDS(here::here("data", "mortality_fits", "surv_tbl.RDS"))
surv_dfa <- map(surv_tbl$group, function(y) {
f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
# f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
readRDS(here::here("data", "mortality_fits", f_name))
})
# import mean gen length
gen_tbl <- readRDS(here::here("data", "generation_fits", "gen_tbl.RDS"))
gen_dfa <- map(gen_tbl$group, function(y) {
f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
# f_name <- paste(y, "two-trend", "bayesdfa_c.RDS", sep = "_")
readRDS(here::here("data", "generation_fits", f_name))
})
group_labs <- c("North\nYearling", "Puget\nSubyearling", "Puget\nYearling",
"SoG\nSubyearling", "South\nSubyearling")
# plotting functions
source(here::here("R", "functions", "plotting_functions.R"))
# prep dataframes for each
rot_surv <- map(surv_dfa, rotate_trends)
?find_regimes
glimpse(rot_surv[[1]])
rot_surv[[1]]$trends_mean[1, ]
r1 <- rot_surv[[1]]
(r1$trends_upper - r1$trends_mean)[2, ]
(r1$trends_upper - r1$trends_mean)[1, ]
f1 <- find_regimes(r1$trends_mean[1, ],
sds = (r1$trends_upper - r1$trends_mean)[1, ] / 1.96)
f2 <- find_regimes(r1$trends_mean[2, ],
sds = (r1$trends_upper - r1$trends_mean)[2, ] / 1.96)
f1 <- find_regimes(r1$trends_mean[1, ],
sds = (r1$trends_upper - r1$trends_mean)[1, ] / 1.96)
f1$table
plot_regime_model(f1$best_model)
plot_regime_model(f2$best_model)
gen_tbl
glimpse(rot_surv[[4]])
r1 <- rot_surv[[4]]
f1 <- find_regimes(r1$trends_mean[1, ],
sds = (r1$trends_upper - r1$trends_mean)[1, ] / 1.96)
f2 <- find_regimes(r1$trends_mean[2, ],
sds = (r1$trends_upper - r1$trends_mean)[2, ] / 1.96)
plot_regime_model(f1$best_model)
plot_regime_model(f2$best_model)
1000/60
require(tidyverse); require(here)
## Prep escapement data
# Focus only on Salish Sea stocks
escDatWide <- read.csv(here("data", "salmonData", "escapement_data_wide.csv"),
stringsAsFactors = FALSE)
glimpse(escDatWide)
## Prep escapement data
# Focus only on Salish Sea stocks
escDatWide <- read.csv(here("data", "salmonData", "escapement_data_wide.csv"),
stringsAsFactors = FALSE)
glimpse(escDatWide)
## Prep escapement data
# Focus only on Salish Sea stocks
escDatWide <- read.csv(here("data", "salmonData", "escapement_data_wide.csv"),
stringsAsFactors = FALSE)
glimpse(escDatWide)
# new survival data
by_raw <- read.csv(here::here("data","salmonData",
"cwt_indicator_surv_sep2020.csv"),
stringsAsFactors = FALSE)
colnames(by_raw)[1] <- "year"
stock_key <- data.frame(
stock = colnames(by_raw)[2:58],
stock_name = t(by_raw[1, 2:58])
) %>%
rename(stock_name = X1)
by_dat1 <- by_raw[-1, ] %>%
pivot_longer(., 2:ncol(.), names_to = "stock", values_to = "survival") %>%
left_join(., stock_key, by = "stock") %>%
mutate(survival = as.numeric(survival),
brood_year = as.numeric(year)) %>%
select(brood_year, stock, stock_name, survival) %>%
arrange(stock)
# mean generation length data
gen1 <- read.csv(here::here("data/salmonData/cwt_indicator_generation_time.csv")) %>%
mutate(stock = as.factor(Stock)) %>%
select(stock, brood_year = BY,
gen_length = GenTim.fishing.mortality.represented.in.calcuations.)
## Generate metadata using old survival as a template than modify in excel
# import old survival data to add some features
# also includes some stocks added manually
# old_surv <- read.csv(here::here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
#                      stringsAsFactors = FALSE) %>%
#   mutate(lat = as.numeric(lat),
#          long = as.numeric(long)) %>%
#   select(stock, jurisdiction:long) %>%
#   distinct()
# export temporary .csv to fill in metadata
# temp_out <- by_dat1 %>%
#   left_join(., old_surv, by = "stock") %>%
#   # filter(is.na(jurisdiction)) %>%
#   select(stock, stock_name, jurisdiction:long) %>%
#   distinct() %>%
#   arrange(stock)
# write.csv(temp_out, here::here("data", "salmonData", "metadata.csv"))
# import version cleaned by hand (added lat/longs and two systems HOK and SMK)
metadata <- read.csv(here::here("data", "salmonData", "metadata_clean.csv"))
by_dat <- metadata %>%
left_join(.,
expand.grid(brood_year = unique(by_dat1$brood_year),
stock = unique(metadata$stock)),
by = "stock") %>%
left_join(., by_dat1, by = c("stock", "stock_name", "brood_year")) %>%
full_join(., gen1, by = c("stock", "brood_year")) %>%
mutate(
lat = as.numeric(hatch_lat),
long = as.numeric(hatch_long),
M = -log(survival),
# change Elwha's region given catch dist similar to Puget
region = ifelse(stock == "ELW", "NPGSD", region),
j_group4 = case_when(
grepl("COLR", region) ~ "col",
region %in% c("HOODC", "SPGSD", "NPGSD") ~ "puget",
(lat > 52 & !region == "UFR") ~ "north",
stock_name == "Transboundary Rivers" ~ "north",
region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI") ~ "south",
TRUE ~ "sog"
),
j_group3 = case_when(
j_group4 %in% c("south", "col") ~ "south",
TRUE ~ j_group4
),
j_group2 = case_when(
j_group3 %in% c("puget", "sog") ~ "salish",
TRUE ~ j_group3
),
j_group1 = case_when(
j_group2 %in% c("south", "north") ~ "shelf",
TRUE ~ j_group2
),
a_group4 = case_when(
#subset of ECVI stocks are north-migrating
stock_name %in% c("Puntledge River Summer", "Quinsam River Fall",
"Lyons Ferry Yearling", "Willamette Spring",
"Atnarko Yearling", "Kitsumkalum Yearling") ~ "north",
stock_name %in% c("Big Qualicum River Fall", "Chilliwack River Fall",
"Cowichan River Fall", "Nanaimo River Fall",
"Harrison River") ~ "sog",
j_group4 == "puget" ~ "puget",
region == "LCOLR" ~ "broad",
smoltType == "streamtype" ~ "offshore",
TRUE ~ "north"
),
a_group3 = case_when(
a_group4 %in% c("sog", "puget") ~ "south",
TRUE ~ a_group4
),
a_group2 = case_when(
a_group3 %in% c("south", "broad") ~ "south",
TRUE ~ a_group3
),
a_group1 = case_when(
a_group2 %in% c("south", "north") ~ "shelf",
TRUE ~ a_group2
),
run = tolower(adultRunTiming)
) %>%
select(stock, stock_name, brood_year, survival, M, gen_length,
jurisdiction, smolt = smoltType, run,
region:long, j_group1, j_group2, j_group3, j_group4, a_group1,
a_group2, a_group3, a_group4) %>%
mutate_at(vars(stock), list(~ factor(., levels = unique(.)))) %>%
mutate(year = ifelse(smolt == "streamtype", brood_year + 2,
brood_year + 1),
smolt = as.factor(smolt),
j_group4 = as.factor(j_group4),
j_group3 = as.factor(j_group3),
j_group2 = as.factor(j_group2),
j_group1 = as.factor(j_group1),
j_group4b  = as.factor(paste(j_group4, smolt, sep = "_")),
j_group3b  = as.factor(paste(j_group3, smolt, sep = "_")),
j_group2b  = as.factor(paste(j_group2, smolt, sep = "_")),
j_group1b = as.factor(paste(j_group1, smolt, sep = "_"))
) %>%
#add final category that separates SoG/PS for subyearlings, but not
#yearlings
mutate(j_group5b = case_when(
j_group2 == "salish" & smolt == "streamtype" ~ "salish_streamtype",
TRUE ~ as.character(j_group3b)
) %>%
as.factor()
)
unique(by_dat)
unique(by_dat$j_group3b)
metadata
glimpse(escDatWide)
esc <- esc_wide %>%
gather(key = stock, value = esc, -Year)
## Prep escapement data
# Focus only on Salish Sea stocks
esc_wide <- read.csv(here("data", "salmonData", "escapement_data_wide.csv"),
stringsAsFactors = FALSE)
esc <- esc_wide %>%
gather(key = stock, value = esc, -Year)
glimpse(esc)
## Load stock key data to help ID groupings
stk_key <- readRDS(here::here("data", "salmonData",
"finalStockList_May2020.rds"))
glimpse(stk_key)
esc_key <- esc_long %>%
select(stock)
esc_long <- esc_wide %>%
gather(key = stock, value = esc, -Year)
esc_key <- esc_long %>%
select(stock)
esc_key
esc_long %>%
select(stock) %>%
distinct()
esc_long <- esc_wide %>%
gather(key = stock, value = esc, -Year) %>%
mutate(stock = tolower(stock))
glimpse(stk_key)
## Load stock key data to help ID groupings
stk_key <- readRDS(here::here("data", "salmonData",
"finalStockList_May2020.rds")) %>%
mutate(stock = tolower(stock))
esc_long %>%
select(stock,
trim_stock = str_remove_all(stock, paste(remove, collapse = "|"))) %>%
distinct()
mutate(trim_stock = str_remove_all(stock, paste(remove, collapse = "|"))
esc_key <- esc_long %>%
select(stock) %>%
distinct() %>%
mutate(trim_stock = str_remove_all(stock, paste(remove, collapse = "|")))
?str_remove_all()
uniqe()
unique(stk_key$stock)
unique(esc_key$stock)
esc_long <- esc_wide %>%
gather(key = stock, value = esc, -Year) %>%
mutate(stock = tolower(stock))
esc_long %>%
select(stock) %>%
distinct()
esc_key <- esc_long %>%
select(stock) %>%
distinct() %>%
mutate(new_stock = NA,
Region1Name = NA)
i <- 1
match <- stringdist::amatch(esc_key$trim_stock[i], stockKey1$stock,
maxDist = 6)
match <- stringdist::amatch(esc_key$trim_stock[i], stk_key$stock,
maxDist = 6)
match
for (i in 1:nrow(esc_key)) {
match <- stringdist::amatch(esc_key$trim_stock[i], stk_key$stock,
maxDist = 6)
esc_key$new_stock[i] <- stk_key$stock[match]
esc_key$Region1Name[i] <- stk_key$Region1Name[match]
}
esc_key <- esc_long %>%
select(stock) %>%
distinct() %>%
mutate(new_stock = NA,
Region1Name = NA)
for (i in 1:nrow(esc_key)) {
match <- stringdist::amatch(esc_key$trim_stock[i], stk_key$stock,
maxDist = 6)
esc_key$new_stock[i] <- stk_key$stock[match]
esc_key$Region1Name[i] <- stk_key$Region1Name[match]
}
i
match
is.integer(match)
match > 1
is(match > 1)
if(match > 1)
match > 1
write.csv(here::here("data", "salmonData", "rawData", "esc_stock_key.csv"),
row.names = FALSE)
write.csv(esc_key,
here::here("data", "salmonData", "rawData", "esc_stock_key.csv"),
row.names = FALSE)
unique(by_dat$j_group3b)
metadata %>% select(stock_name, juv_group3b)
metadata %>% select(stock_name, j_group3b)
by_dat %>% select(stock_name, j_group3b) %>% distinct()
esc_key <- read.csv(here::here("data", "salmonData",
"esc_stock_key.csv"))
esc_key
esc <- esc_long %>%
left_join(., esc_key, by = "stock") %>%
# drop some redundant stocks
filter(!is.na(new_stock)) %>%
glimpse()
esc <- esc_long %>%
left_join(., esc_key, by = "stock") %>%
# drop some redundant stocks
filter(!is.na(new_stock)) %>%
mutate(
escapement = esc / 1000,
year = as.numeric(
case_when(
Year > 74 & Year < 100 ~ paste("19", Year, sep = ""),
Year < 10 ~ paste("200", Year, sep =  ""),
TRUE ~ paste("20", Year, sep = "")))
) %>%
select(year, stock = new_stock, juv_group3b, escapement) %>%
glimpse()
write.csv(esc, here::here("data", "salmonData", "clean_escapement_data.csv"),
row.names = FALSE)
