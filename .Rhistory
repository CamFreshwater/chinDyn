facet_wrap(~parameter, scales = "free_x")
ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3)) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
?geom_violin()
ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = c(0.1, 0.5, 0.9)) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = c(0.1, 0.5, 0.9),
lty = c(2, 1, 2)) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_pars <- map2(gen_dfa, group_labs, pull_par_f) %>%
bind_rows()
ggplot(gen_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_pars %>% filter(is.na(phi)) %>% glimpse()
gen_pars %>% filter(parameter == "phi" & is.na(value)) %>% glimpse()
gen_pars %>% filter(parameter == "psi" & is.na(value)) %>% glimpse()
pdf(here::here("figs", "pars_both_vars.pdf"), height = 7, width = 4)
surv_par_plot
gen_par_plot
dev.off()
surv_par_plot <- ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_par_plot <- ggplot(gen_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
pdf(here::here("figs", "pars_both_vars.pdf"), height = 7, width = 4)
surv_par_plot
gen_par_plot
dev.off()
pdf(here::here("figs", "pars_both_vars.pdf"))
surv_par_plot
gen_par_plot
dev.off()
surv_par_plot <- ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_par_plot <- ggplot(gen_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(yintercept = 0, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
pdf(here::here("figs", "pars_both_vars.pdf"))
surv_par_plot
gen_par_plot
dev.off()
rotate_trends
# pull pars
pull_par_f <- function(x, group) {
as_tibble(x$samples, rownames = "iterations") %>%
pivot_longer(cols = -iterations,
names_sep = "\\.",
names_to = c("chains", "parameter")) %>%
filter(grepl("psi", parameter) | grepl("phi", parameter) |
grepl("nu", parameter)) %>%
mutate(group = group,
trend = case_when(
grepl("nu", parameter) ~ "Trend 1 and 2",
grepl("[1]", parameter) ~ "Trend 1",
grepl("[2]", parameter) ~ "Trend 2"
),
parameter = case_when(
grepl("psi", parameter) ~ "psi",
grepl("phi", parameter) ~ "phi",
grepl("nu", parameter) ~ "nu",
TRUE ~ parameter
),
y_int = ifelse(paramter == "nu", 10, 0))
}
# survival pars
surv_pars <- map2(surv_dfa, group_labs, pull_par_f) %>%
bind_rows()
# pull pars
pull_par_f <- function(x, group) {
as_tibble(x$samples, rownames = "iterations") %>%
pivot_longer(cols = -iterations,
names_sep = "\\.",
names_to = c("chains", "parameter")) %>%
filter(grepl("psi", parameter) | grepl("phi", parameter) |
grepl("nu", parameter)) %>%
mutate(group = group,
trend = case_when(
grepl("nu", parameter) ~ "Trend 1 and 2",
grepl("[1]", parameter) ~ "Trend 1",
grepl("[2]", parameter) ~ "Trend 2"
),
parameter = case_when(
grepl("psi", parameter) ~ "psi",
grepl("phi", parameter) ~ "phi",
grepl("nu", parameter) ~ "nu",
TRUE ~ parameter
),
y_int = ifelse(parameter == "nu", 10, 0))
}
# survival pars
surv_pars <- map2(surv_dfa, group_labs, pull_par_f) %>%
bind_rows()
surv_par_plot <- ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(yintercept = y_int, lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
glimpse(surv_pars)
surv_par_plot <- ggplot(surv_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(aes(yintercept = y_int), lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
surv_par_plot
gen_par_plot <- ggplot(gen_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(aes(yintercept = y_int), lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_par_plot
gen_pars <- map2(gen_dfa, group_labs, pull_par_f) %>%
bind_rows()
gen_par_plot <- ggplot(gen_pars,
aes(x = group, y = value, fill = trend)) +
scale_fill_brewer(name = "", palette = "Set2") +
geom_violin(position = position_dodge(0.3),
draw_quantiles = 0.5) +
geom_hline(aes(yintercept = y_int), lty = 2) +
coord_flip() +
ylab("Posterior Estimate") +
xlab("Stock Grouping") +
# scale_y_continuous(expand = c(0, 0)) +
ggsidekick::theme_sleek() +
guides(alpha = guide_legend(override.aes = list(fill = "grey"))) +
facet_wrap(~parameter, scales = "free_x")
gen_par_plot
pdf(here::here("figs", "pars_both_vars.pdf"))
surv_par_plot
gen_par_plot
dev.off()
library(MARSS)
library(tidyverse)
gen_raw <- readRDS(here::here("data", "salmonData",
"cwt_indicator_surv_clean.RDS"))
glimpse(gen_raw)
map(colnames(gen)[which(colnames(gen) %in% c("smolt", "run") |
str_detect(colnames(gen), "group"))],
function(x) {
gen %>%
select(stock_name, .data[[x]]) %>%
distinct() %>%
group_by(.data[[x]]) %>%
tally()
})
# dataframe of only stocks and adult groupings
stk_tbl <- gen %>%
group_by(stock) %>%
mutate(max_age = ceiling(max(gen_length)),
max_ocean_age = ifelse(smolt == "oceantype", max_age - 1,
max_age - 2)) %>%
ungroup() %>%
select(stock, stock_name, max_age, max_ocean_age, smolt, run,
j_group1:j_group4, a_group1:a_group4, j_group4b:j_group1b) %>%
distinct()
gen <- gen_raw %>%
filter(!is.na(gen_length),
#!j_group3 %in% c("col_streamtype", "north_oceantype",
# "sog_streamtype"),
#!a_group3 == "north_streamtype"
) %>%
group_by(stock) %>%
mutate(gen_z = as.numeric(scale(gen_length)),
gen_cent = as.numeric(scale(gen_length, center = TRUE,
scale = FALSE))) %>%
ungroup() %>%
droplevels()
map(colnames(gen)[which(colnames(gen) %in% c("smolt", "run") |
str_detect(colnames(gen), "group"))],
function(x) {
gen %>%
select(stock_name, .data[[x]]) %>%
distinct() %>%
group_by(.data[[x]]) %>%
tally()
})
# dataframe of only stocks and adult groupings
stk_tbl <- gen %>%
group_by(stock) %>%
mutate(max_age = ceiling(max(gen_length)),
max_ocean_age = ifelse(smolt == "oceantype", max_age - 1,
max_age - 2)) %>%
ungroup() %>%
select(stock, stock_name, max_age, max_ocean_age, smolt, run,
j_group1:j_group4, a_group1:a_group4, j_group4b:j_group1b) %>%
distinct()
library(bayesdfa)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#helper function to spread and label input matrices for bayesdfa
make_mat <- function(x) {
mat1 <- x %>%
select(year, stock, gen_length) %>%
spread(key = stock, value = gen_length) %>%
as.matrix()
out_mat <- t(mat1[, 2:ncol(mat1)])
colnames(out_mat) <- mat1[, "year"]
return(out_mat)
}
# number of stocks per group
kept_grps <- stk_tbl %>%
group_by(j_group3b) %>%
tally() %>%
filter(n > 2)
#generate tbl by group
gen_tbl <- tibble(group = levels(gen$j_group3b)) %>%
mutate(
gen_mat = gen %>%
filter(!is.na(gen_length)) %>%
group_split(j_group3b) %>%
map(., make_mat)
) %>%
filter(group %in% kept_grps$j_group3b)
gen_tbl
gen <- gen_raw %>%
filter(!is.na(gen_length),
j_group3b == "puget_oceantype") %>%
group_by(stock) %>%
mutate(gen_z = as.numeric(scale(gen_length)),
gen_cent = as.numeric(scale(gen_length, center = TRUE,
scale = FALSE))) %>%
ungroup() %>%
droplevels()
mat_in <- gen %>%
select(year, stock, gen_length) %>%
spread(key = stock, value = gen_length) %>%
as.matrix()
glimpse(mat_in)
out_mat <- t(mat1[, 2:ncol(mat1)])
colnames(out_mat) <- mat1[, "year"]
mat1 <- gen %>%
select(year, stock, gen_length) %>%
spread(key = stock, value = gen_length) %>%
as.matrix()
mat_in <- t(mat1[, 2:ncol(mat1)])
colnames(mat_in) <- mat1[, "year"]
head(mat_in)
gen <- gen_raw %>%
filter(j_group3b == "puget_oceantype") %>%
droplevels()
mat1 <- gen %>%
select(year, stock, gen_length) %>%
spread(key = stock, value = gen_length) %>%
as.matrix()
library(MARSS)
library(tidyverse)
library(bayesdfa)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
gen_raw <- readRDS(here::here("data", "salmonData",
"cwt_indicator_surv_clean.RDS"))
gen <- gen_raw %>%
filter(j_group3b == "puget_oceantype") %>%
droplevels()
mat1 <- gen %>%
select(year, stock, gen_length) %>%
spread(key = stock, value = gen_length) %>%
as.matrix()
mat_in <- t(mat1[, 2:ncol(mat1)])
colnames(mat_in) <- mat1[, "year"]
fit_scale <- fit_dfa(
y = mat_in, num_trends = 2, zscore = TRUE,
iter = 3000, chains = 4, thin = 1,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
fit_center <- fit_dfa(
y = mat_in, num_trends = 2, zscore = FALSE,
iter = 3000, chains = 4, thin = 1,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
library(MARSS)
library(tidyverse)
# prep multisession
ncores <- parallel::detectCores()
future::plan(future::multisession, workers = ncores - 2)
gen_raw <- readRDS(here::here("data", "salmonData",
"cwt_indicator_surv_clean.RDS"))
gen <- gen_raw %>%
filter(!is.na(gen_length),
#!j_group3 %in% c("col_streamtype", "north_oceantype",
# "sog_streamtype"),
#!a_group3 == "north_streamtype"
) %>%
group_by(stock) %>%
mutate(gen_z = as.numeric(scale(gen_length)),
gen_cent = as.numeric(scale(gen_length, center = TRUE,
scale = FALSE))) %>%
ungroup() %>%
droplevels()
map(colnames(gen)[which(colnames(gen) %in% c("smolt", "run") |
str_detect(colnames(gen), "group"))],
function(x) {
gen %>%
select(stock_name, .data[[x]]) %>%
distinct() %>%
group_by(.data[[x]]) %>%
tally()
})
# dataframe of only stocks and adult groupings
stk_tbl <- gen %>%
group_by(stock) %>%
mutate(max_age = ceiling(max(gen_length)),
max_ocean_age = ifelse(smolt == "oceantype", max_age - 1,
max_age - 2)) %>%
ungroup() %>%
select(stock, stock_name, max_age, max_ocean_age, smolt, run,
j_group1:j_group4, a_group1:a_group4, j_group4b:j_group1b) %>%
distinct()
library(bayesdfa)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#helper function to spread and label input matrices for bayesdfa
make_mat <- function(x) {
mat1 <- x %>%
select(year, stock, gen_length) %>%
spread(key = stock, value = gen_length) %>%
as.matrix()
out_mat <- t(mat1[, 2:ncol(mat1)])
colnames(out_mat) <- mat1[, "year"]
return(out_mat)
}
# number of stocks per group
kept_grps <- stk_tbl %>%
group_by(j_group3b) %>%
tally() %>%
filter(n > 2)
#generate tbl by group
gen_tbl <- tibble(group = levels(gen$j_group3b)) %>%
mutate(
gen_mat = gen %>%
filter(!is.na(gen_length)) %>%
group_split(j_group3b) %>%
map(., make_mat)
) %>%
filter(group %in% kept_grps$j_group3b)
gen_tbl$names <- map(gen_tbl$gen_mat, function (x) {
data.frame(stock = row.names(x)) %>%
left_join(., gen %>% select(stock, stock_name) %>% distinct(),
by = "stock")
})
gen_tbl$years <- map(gen_tbl$gen_mat, function (x) {
as.numeric(colnames(x))
})
gen_tbl
furrr::future_map2(
gen_tbl$gen_mat,
gen_tbl$group,
.f = function (y, group) {
fit <- fit_dfa(
y = y, num_trends = 2, #zscore = FALSE,
# estimate_nu = TRUE, estimate_trend_ar = TRUE, estimate_trend_ma = FALSE,
zscore = TRUE,
iter = 3000, chains = 4, thin = 1,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
f_name <- paste(group, "two-trend", "bayesdfa.RDS", sep = "_")
saveRDS(fit, here::here("data", "generation_fits", f_name))
},
.progress = TRUE,
.options = furrr::furrr_options(seed = TRUE)
)
surv <- surv_raw %>%
filter(j_group3b == "puget_oceantype") %>%
droplevels()
surv_raw <- readRDS(here::here("data", "salmonData",
"cwt_indicator_surv_clean.RDS"))
surv <- surv_raw %>%
filter(j_group3b == "puget_oceantype") %>%
droplevels()
dat <- readRDS(here::here("data", "salmonData",
"cwt_indicator_surv_clean.RDS")) %>%
filter(j_group3b == "puget_oceantype") %>%
droplevels()
mat1 <- dat %>%
select(year, stock, M) %>%
spread(key = stock, value = M) %>%
as.matrix()
mat1
mat_in <- t(mat1[, 2:ncol(mat1)])
colnames(mat_in) <- mat1[, "year"]
mat_in
fit_scale <- fit_dfa(
y = mat_in, num_trends = 2, zscore = TRUE,
iter = 3000, chains = 4, thin = 1,
control = list(adapt_delta = 0.99, max_treedepth = 20)
)
?fit_dfa
