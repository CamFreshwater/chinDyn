height = 5, width = 7)
pmap(list(dat$ss_preds, dat$data, dat$metric), function (pred_dat, obs_dat, title) {
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
shape = 21) +
facet_wrap(~fct_reorder(stock, as.numeric(smolt)))  +
ggsidekick::theme_sleek() +
labs(title = title)
})
dev.off()
pred_dat <- dat$ss_preds[[1]]
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
# geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
#            shape = 21) +
facet_wrap(~fct_reorder(stock, as.numeric(smolt)))  +
ggsidekick::theme_sleek()
glimpse(pred_dat)
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
# geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
#            shape = 21) +
facet_wrap(data = pred_dat, ~fct_reorder(stock, as.numeric(smolt)))  +
ggsidekick::theme_sleek() +
labs(title = title)
# generate stock-specific predictions from more complicated model
# observed data for plotting
dat$ss_preds <- map2(dat$data, dat$gam2, function(dat_in, gam_in) {
pred_seq <- seq(min(dat_in$env_anomaly, na.rm = T),
max(dat_in$env_anomaly, na.rm = T),
length.out = 100)
new_dat <- expand.grid(env_anomaly = pred_seq,
stock = unique(dat_in$stock)) %>%
left_join(., dat_in %>% select(stock, smolt) %>% distinct(), by = "stock")
preds <- predict(gam_in, new_dat, se.fit = TRUE, type = "link")
new_dat %>%
mutate(
stock = fct_reorder(stock, as.numeric(smolt)),
fit = as.numeric(boot::inv.logit(preds$fit)),
up = as.numeric(boot::inv.logit(preds$fit +
(qnorm(0.975) * preds$se.fit))),
low = as.numeric(boot::inv.logit(preds$fit +
(qnorm(0.025) * preds$se.fit)))
)
})
pred_dat <- dat$ss_preds[[1]]
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
# geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
#            shape = 21) +
facet_wrap(~stock)  +
ggsidekick::theme_sleek() +
labs(title = title)
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
# geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
#            shape = 21) +
facet_wrap(~stock)  +
ggsidekick::theme_sleek()
pdf(here::here("figs", "gam", "stock_specific_splines.pdf"),
height = 5, width = 7)
pmap(list(dat$ss_preds, dat$data, dat$metric), function (pred_dat, obs_dat, title) {
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
shape = 21) +
facet_wrap(~stock)  +
ggsidekick::theme_sleek() +
labs(title = title)
})
dev.off()
glimpse(surv)
surv <- read.csv(here::here("data/salmonData/cwt_indicator_surv_clean.csv"),
stringsAsFactors = FALSE)
glimpse(surv)
surv_raw <- read.csv(here::here("data/salmonData/cwt_indicator_surv_clean.csv"),
stringsAsFactors = FALSE)
surv <- surv_raw %>%
filter(agg_reg == "SS",
!is.na(M)) %>%
select(year, stock, smolt, survival, M) %>%
mutate(smolt = as.factor(smolt),
stock = as.factor(stock))
stock_key <- surv_raw %>%
select(stock, stock_name, region, smolt) %>%
distinct()
stock_key
stock_key <- surv_raw %>%
filter(agg_reg == "SS") %>%
select(stock, stock_name, region, smolt) %>%
distinct()
stock_key
# stock-specific predictions (as above) but in link space
dat$ss_preds <- map2(dat$data, dat$gam2, function(dat_in, gam_in) {
pred_seq <- seq(min(dat_in$env_anomaly, na.rm = T),
max(dat_in$env_anomaly, na.rm = T),
length.out = 100)
new_dat <- expand.grid(env_anomaly = pred_seq,
stock = unique(dat_in$stock)) %>%
left_join(., dat_in %>% select(stock, smolt) %>% distinct(), by = "stock")
preds <- predict(gam_in, new_dat, se.fit = TRUE, type = "link")
new_dat %>%
mutate(fit = as.numeric(preds$fit),
up = as.numeric(preds$fit + (qnorm(0.975) * preds$se.fit)),
low = as.numeric(preds$fit + (qnorm(0.025) * preds$se.fit))
)
})
# stock-specific predictions (as above) but in link space
dat$ss_preds <- map2(dat$data, dat$gam2, function(dat_in, gam_in) {
pred_seq <- seq(min(dat_in$env_anomaly, na.rm = T),
max(dat_in$env_anomaly, na.rm = T),
length.out = 100)
new_dat <- expand.grid(env_anomaly = pred_seq,
stock = unique(dat_in$stock)) %>%
left_join(., dat_in %>% select(stock, smolt) %>% distinct(), by = "stock")
preds <- predict(gam_in, new_dat, se.fit = TRUE, type = "link")
new_dat %>%
mutate(fit = as.numeric(preds$fit),
up = as.numeric(preds$fit + (qnorm(0.975) * preds$se.fit)),
low = as.numeric(preds$fit + (qnorm(0.025) * preds$se.fit))
)
})
pdf(here::here("figs", "gam", "stock_specific_splines_link.pdf"),
height = 5, width = 7)
pmap(list(dat$ss_preds, dat$data, dat$metric), function (pred_dat, obs_dat, title) {
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
shape = 21) +
facet_wrap(~fct_reorder(stock, as.numeric(smolt)))  +
ggsidekick::theme_sleek() +
labs(title = title)
})
dev.off()
# stock-specific predictions (as above) but in link space
dat$ss_preds <- map2(dat$data, dat$gam2, function(dat_in, gam_in) {
pred_seq <- seq(min(dat_in$env_anomaly, na.rm = T),
max(dat_in$env_anomaly, na.rm = T),
length.out = 100)
new_dat <- expand.grid(env_anomaly = pred_seq,
stock = unique(dat_in$stock)) %>%
left_join(., dat_in %>% select(stock, smolt) %>% distinct(), by = "stock")
preds <- predict(gam_in, new_dat, se.fit = TRUE, type = "link")
new_dat %>%
mutate(stock = fct_reorder(stock, as.numeric(smolt)),
fit = as.numeric(preds$fit),
up = as.numeric(preds$fit + (qnorm(0.975) * preds$se.fit)),
low = as.numeric(preds$fit + (qnorm(0.025) * preds$se.fit))
)
})
pdf(here::here("figs", "gam", "stock_specific_splines_link.pdf"),
height = 5, width = 7)
pmap(list(dat$ss_preds, dat$data, dat$metric), function (pred_dat, obs_dat, title) {
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = env_anomaly, y = survival, fill = smolt),
shape = 21) +
facet_wrap(~stock)  +
ggsidekick::theme_sleek() +
labs(title = title)
})
dev.off()
boot::inv.logit(.02)
logit(.02)
boot::logit(0.02)
pdf(here::here("figs", "gam", "stock_specific_splines_link.pdf"),
height = 5, width = 7)
pmap(list(dat$ss_preds, dat$data, dat$metric), function (pred_dat, obs_dat, title) {
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = env_anomaly, y = boot::logit(survival),
fill = smolt),
shape = 21) +
facet_wrap(~stock)  +
ggsidekick::theme_sleek() +
labs(title = title)
})
dev.off()
pdf(here::here("figs", "gam", "stock_specific_splines_link.pdf"),
height = 5, width = 7)
pmap(list(dat$ss_preds, dat$data, dat$metric), function (pred_dat, obs_dat, title) {
ggplot() +
geom_line(data = pred_dat, aes(x = env_anomaly, y = fit, color = smolt)) +
geom_ribbon(data = pred_dat, aes(x = env_anomaly, ymin = low, ymax = up,
fill = smolt),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = env_anomaly, y = boot::logit(survival),
fill = smolt),
shape = 21) +
facet_wrap(~stock)  +
ggsidekick::theme_sleek() +
labs(title = title)
})
dev.off()
# generate fixed effects predictions from simpler model
dat$fixed_preds <- map2(dat$data, dat$gam1, function(dat_in, gam_in) {
pred_seq <- seq(min(dat_in$env_anomaly, na.rm = T),
max(dat_in$env_anomaly, na.rm = T),
length.out = 100)
new_dat <- expand.grid(env_anomaly = pred_seq, smolt = unique(dat_in$smolt))
preds <- predict(gam_in, new_dat, se.fit = TRUE, exclude="s(stock)",
newdata.guaranteed=TRUE, type = "link")
new_dat %>%
mutate(fit = boot::inv.logit(preds$fit),
up = boot::inv.logit(preds$fit + (qnorm(0.975) * preds$se.fit)),
low = boot::inv.logit(preds$fit + (qnorm(0.025) * preds$se.fit)),
logit_fit = preds$fit,
logit_up = preds$fit + (qnorm(0.975) * preds$se.fit),
logit_low = preds$fit + (qnorm(0.025) * preds$se.fit)
)
})
pdf(here::here("figs", "gam", "fixed_effect_splines_link.pdf"),
height = 5, width = 7)
dat %>%
select(metric, fixed_preds) %>%
unnest(fixed_preds) %>%
ggplot(.) +
geom_line(aes(x = env_anomaly, y = logit_fit, color = smolt)) +
geom_ribbon(aes(x = env_anomaly, ymin = logit_low, ymax = logit_up,
fill = smolt), alpha = 0.3) +
facet_wrap(~metric, scales = "free_x") +
ggsidekick::theme_sleek()
dev.off()
# # raw plot
plot_dat <- surv %>%
left_join(., cov, by = "year")
knitr::opts_chunk$set(echo = TRUE)
surv <- read.csv(here::here("data/salmonData/cwt_indicator_surv_clean.csv"),
stringsAsFactors = FALSE) %>%
mutate_at(vars(stock), list(~ factor(., levels = unique(.)))) %>%
mutate(group = as.factor(group),
stock = fct_reorder(stock, as.numeric(group)))
raw_surv <- surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
labs(y = "Scaled M")
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
labs(y = "Scaled M")
glimspe(surv)
glimpse(surv)
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = survival, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
labs(y = "M")
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
labs(y = "M")
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
scale_x_continuous(breaks = c("1970", "1990", "2010")) +
labs(y = "M") +
ggsidekick::theme_sleek()
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
scale_x_continuous(breaks = c(1970, 1990, 2010)) +
labs(y = "M") +
ggsidekick::theme_sleek()
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
scale_x_continuous(breaks = c(1977, 1990, 2005)) +
labs(y = "M") +
ggsidekick::theme_sleek()
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
theme(legend.position = "top") +
scale_x_continuous(breaks = c(1975, 1990, 2005)) +
labs(y = "M") +
ggsidekick::theme_sleek()
?labs
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
scale_x_continuous(breaks = c(1975, 1990, 2005)) +
scale_fill_discrete(name = "Region/ \nLife History")
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
scale_x_continuous(breaks = c(1975, 1990, 2005)) +
scale_fill_discrete(name = "Region/ \nLife History") +
labs(y = "M") +
ggsidekick::theme_sleek() +
theme(legend.position = "top")
surv %>%
filter(!is.na(M)) %>%
ggplot(.) +
geom_point(aes(x = year, y = M, fill = group), shape = 21) +
facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
scale_x_continuous(breaks = c(1975, 1990, 2005)) +
scale_fill_discrete(name = "Region/ \nLife History") +
labs(y = "M") +
ggsidekick::theme_sleek() +
theme(legend.position = "top")
library(tidyverse)
library(bayesdfa)
library(rstan)
#helper functions to fit and post-process DFA
source(here::here("R/functions/dfaFunctions.R"))
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
surv <- read.csv(here::here("data/salmonData/cwt_indicator_surv_clean.csv"),
stringsAsFactors = FALSE) %>%
mutate_at(vars(stock), list(~ factor(., levels = unique(.)))) %>%
mutate(group = as.factor(group),
stock = fct_reorder(stock, as.numeric(group)))
make_mat <- function(x) {
x %>%
select(year, stock, M) %>%
spread(key = stock, value = M) %>%
select(-year) %>%
as.matrix() %>%
t()
}
surv_trim2 <- surv %>%
filter(!group %in% c("north_oceantype", "south_streamtype")) %>%
droplevels()
surv_tbl <- tibble(group = levels(surv_trim2$group)) %>%
mutate(
m_mat = surv_trim2 %>%
filter(!is.na(M)) %>%
group_split(group) %>%
map(., make_mat)
)
surv_tbl$names <- map(surv_tbl$m_mat, function (x) {
data.frame(stock = row.names(x)) %>%
left_join(., surv %>% select(stock, stock_name) %>% distinct(),
by = "stock")
})
surv_tbl
?fit_dfa
surv_tbl$dfa <- map(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
surv_tbl$dfa <- lapply(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
surv_tbl$m_mat[[1]]
fit_dfa(y = surv_tbl$m_mat[[1]], num_trends = 2, zscore = TRUE, iter = 500,
chains = 1,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
class(surv_tbl$m_mat)
dfa_list <- lapply(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
library(tidyverse)
library(bayesdfa)
library(rstan)
#helper functions to fit and post-process DFA
source(here::here("R/functions/dfaFunctions.R"))
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
surv <- read.csv(here::here("data/salmonData/cwt_indicator_surv_clean.csv"),
stringsAsFactors = FALSE) %>%
mutate_at(vars(stock), list(~ factor(., levels = unique(.)))) %>%
mutate(group = as.factor(group),
stock = fct_reorder(stock, as.numeric(group)))
make_mat <- function(x) {
x %>%
select(year, stock, M) %>%
spread(key = stock, value = M) %>%
select(-year) %>%
as.matrix() %>%
t()
}
# fit models to each region, then export to Rmd
dfa_list <- lapply(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
library(tidyverse)
library(bayesdfa)
library(rstan)
#helper functions to fit and post-process DFA
source(here::here("R/functions/dfaFunctions.R"))
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
surv <- read.csv(here::here("data/salmonData/cwt_indicator_surv_clean.csv"),
stringsAsFactors = FALSE) %>%
mutate_at(vars(stock), list(~ factor(., levels = unique(.)))) %>%
mutate(group = as.factor(group),
stock = fct_reorder(stock, as.numeric(group)))
# saveRDS(surv, here::here("data", "salmonData", "clean_dfa_inputs.rds"))
# plots
# raw_surv <- surv %>%
#   filter(!is.na(M)) %>%
#   ggplot(.) +
#   geom_point(aes(x = year, y = M, fill = group), shape = 21) +
#   facet_wrap(~ fct_reorder(stock, as.numeric(group))) +
#   theme(legend.position = "top") +
#   labs(y = "Scaled M")
# pdf(here::here("figs", "raw_M_trends.pdf"))
# raw_surv
# dev.off()
#
# ggplot(surv %>% filter(!is.na(M))) +
#   geom_histogram(aes(x = M, fill = group)) +
#   facet_wrap(~stock) +
#   theme(legend.position = "top")
make_mat <- function(x) {
x %>%
select(year, stock, M) %>%
spread(key = stock, value = M) %>%
select(-year) %>%
as.matrix() %>%
t()
}
# fit models to each region, then export to Rmd
dfa_list <- lapply(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
surv_trim2 <- surv %>%
filter(!group %in% c("north_oceantype", "south_streamtype")) %>%
droplevels()
surv_tbl <- tibble(group = levels(surv_trim2$group)) %>%
mutate(
m_mat = surv_trim2 %>%
filter(!is.na(M)) %>%
group_split(group) %>%
map(., make_mat)
)
surv_tbl$names <- map(surv_tbl$m_mat, function (x) {
data.frame(stock = row.names(x)) %>%
left_join(., surv %>% select(stock, stock_name) %>% distinct(),
by = "stock")
})
# fit models to each region, then export to Rmd
dfa_list <- lapply(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
surv_tbl$m_mat
map(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
map(surv_tbl$m_mat, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 2000, chains = 4,
thin = 1, control = list(adapt_delta = 0.95, max_treedepth = 20))
})
# # evaluate up to 3 trends per group
# surv_tbl <- readRDS(here::here("data", "dfaBayesFits",
#                                "group_top_models.rds"))
trend_select_list <- lapply(surv_tbl$m_mat, function(x) {
find_dfa_trends(x, iter = 500, kmin = 1, kmax = 1, chains = 4,
variance =  "equal",
control = list(adapt_delta = 0.95, max_treedepth = 20))
})
