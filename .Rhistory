ggtitle(names(survList)[1]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[1]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
plot_fittedX <- function (modelfit, names = NULL, startYr = 1972,
dotCol = "red") {
n_ts <- dim(modelfit$data)[1]
n_years <- dim(modelfit$data)[2]
pred <- predicted(modelfit)
df <- data.frame(ID = rep(seq_len(n_ts), n_years),
Time = sort(rep(seq_len(n_years), n_ts)),
mean = c(t(apply(pred, c(3, 4), mean))),
lo = c(t(apply(pred, c(3, 4), quantile, 0.025))),
hi = c(t(apply(pred, c(3,  4), quantile, 0.975))),
y = c(modelfit$data)) %>%
dplyr::mutate(timeT = (startYr - 1 + Time))
if (!is.null(names)) {
df$ID <- names[df$ID]
}
p1 <- ggplot(df, aes_string(x = "timeT", y = "mean")) +
geom_ribbon(aes_string(ymin = "lo",  ymax = "hi"), alpha = 0.4) +
geom_line() + geom_point(aes_string(x = "timeT", y = "y"), col = dotCol,
size = 0.75, alpha = 0.6) +
facet_wrap("ID",  scales = "free_y") +
xlab("Ocean Entry Year") +
ylab("Survival Anomaly")
p1
}
fitList <- lapply(seq_along(dum), function(x) {
mod <- dum[[x]]
p <- if (x == 2) {
plot_fittedX(mod, startYr = 1972, dotCol = "blue")
} else {
plot_fittedX(mod, startYr = 1972)
}
p <- p +
ggtitle(names(survList)[x]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[x]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
return(p)
})
x <- 2
fitList[[2]]
fitList[[3]]
fitList <- lapply(seq_along(dum), function(x) {
mod <- dum[[x]]
p <- if (x == 2) {
plot_fittedX(mod, startYr = 1972, dotCol = "blue")
} else {
plot_fittedX(mod, startYr = 1972)
}
p <- p +
ggtitle(names(survList)[x]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[x]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
return(p)
})
head(eyDatFull)
x
x <- 3
listStkNames[[x]]
listStkNames <- lapply(survList, function(x) {
name <- rownames(x)
numSeq <- seq(1, length(name), by = 1)
out <- vector(mode = "character", length = length(numSeq))
setNames(name, numSeq)
})
fitList <- lapply(seq_along(dum), function(x) {
mod <- dum[[x]]
p <- if (x == 2) {
plot_fittedX(mod, startYr = 1972, dotCol = "blue")
} else {
plot_fittedX(mod, startYr = 1972)
}
p <- p +
ggtitle(names(survList)[x]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[x]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
return(p)
})
fitList[[3]]
eyDatFull %>%
filter(stock %in% c("SHU", "QUI"),
!is.na(surv))
eyDatFull %>%
filter(stock %in% c("SHU", "QUI"),
!is.na(surv)) %>%
summarize(min(OEY))
eyDatFull %>%
filter(stock %in% c("SHU", "QUI"),
!is.na(surv)) %>%
group_by(stock) %>%
summarize(min(OEY))
eyDatFull %>%
filter(stock %in% c("SHU", "QUI", "NIS"),
!is.na(surv)) %>%
group_by(stock) %>%
summarize(min(OEY))
x <- 2
mod <- dum[[x]]
plot_fittedX(mod, startYr = 1972, dotCol = "#B79F00")
plot_fittedX(mod, startYr = 1972, dotCol = "#00BFC4")
fitList <- lapply(seq_along(dum), function(x) {
mod <- dum[[x]]
p <- if (x == 2) {
plot_fittedX(mod, startYr = 1972, dotCol = "#00BFC4")
} else {
plot_fittedX(mod, startYr = 1972)
}
p <- p +
ggtitle(names(survList)[x]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[x]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
return(p)
})
for(x in seq_along(fitList)) {
fileName <- paste(abbreviate(names(survList)[x], 6), "3TrendFits.png",
sep = "_")
png(here("figs", "dfa", "rangeWideBayes", "3Trends_EqualCov", fileName),
height = 5.25,
width = 6.5, units = "in", res = 300)
plot(fitList[[x]])
dev.off()
}
plot_fittedX <- function (modelfit, names = NULL, startYr = 1972,
dotCol = "red") {
n_ts <- dim(modelfit$data)[1]
n_years <- dim(modelfit$data)[2]
pred <- predicted(modelfit)
df <- data.frame(ID = rep(seq_len(n_ts), n_years),
Time = sort(rep(seq_len(n_years), n_ts)),
mean = c(t(apply(pred, c(3, 4), mean))),
lo = c(t(apply(pred, c(3, 4), quantile, 0.025))),
hi = c(t(apply(pred, c(3,  4), quantile, 0.975))),
y = c(modelfit$data)) %>%
dplyr::mutate(timeT = (startYr - 1 + Time))
if (!is.null(names)) {
df$ID <- names[df$ID]
}
p1 <- ggplot(df, aes_string(x = "timeT", y = "mean")) +
geom_ribbon(aes_string(ymin = "lo",  ymax = "hi"), alpha = 0.4) +
geom_line() + geom_point(aes_string(x = "timeT", y = "y"), col = dotCol,
size = 0.9, alpha = 0.5) +
facet_wrap("ID",  scales = "free_y") +
xlab("Ocean Entry Year") +
ylab("Survival Anomaly")
p1
}
fitList <- lapply(seq_along(dum), function(x) {
mod <- dum[[x]]
p <- if (x == 2) {
plot_fittedX(mod, startYr = 1972, dotCol = "#00BFC4")
} else {
plot_fittedX(mod, startYr = 1972)
}
p <- p +
ggtitle(names(survList)[x]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[x]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
return(p)
})
for(x in seq_along(fitList)) {
fileName <- paste(abbreviate(names(survList)[x], 6), "3TrendFits.png",
sep = "_")
png(here("figs", "dfa", "rangeWideBayes", "3Trends_EqualCov", fileName),
height = 5.25,
width = 6.5, units = "in", res = 300)
plot(fitList[[x]])
dev.off()
}
exp(0.2)
exp(0.5)
log(0.5)
log10(0.5)
listOfPackages <- c("here", "bayesdfa", "tidyverse", "ggplot2", "parallel",
"doParallel", "foreach", "tictoc")
lapply(listOfPackages, library, character.only = TRUE)
eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
eyDatFull <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
arrange(grp) %>%
mutate(stock = factor(stock, unique(stock))) %>%
filter(!grp %in% c("oceantype_north", "streamtype_south")) %>%
select(-stockName, -jurisdiction, -lat, -long)
## Time series of survival
ggplot(eyDatFull, aes(x = OEY, y = surv, col = grp)) +
geom_line() +
samSim::theme_sleekX() +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(~stock)
#Split groupe data into lists of matrices
convMat <- function(mat) {
mat %>%
select(OEY, stock, surv) %>%
spread(key = stock, value = surv) %>%
select(-OEY) %>%
as.matrix() %>%
t()
}
survList <- split(eyDatFull, eyDatFull$grp) %>%
lapply(., convMat)
#Surprisingly verbose chunk of code to create named character list for labelling
#subsequent plots
listStkNames <- lapply(survList, function(x) {
name <- rownames(x)
numSeq <- seq(1, length(name), by = 1)
out <- vector(mode = "character", length = length(numSeq))
setNames(name, numSeq)
})
#Fit models
#set up trend inputs to allow for parallel processing
options(mc.cores = parallel::detectCores())
Ncores <- detectCores()
cl <- makeCluster(Ncores - 4) #save four cores
registerDoParallel(cl)
clusterEvalQ(cl, c(library(bayesdfa), library(here), library(Rcpp),
library(RcppArmadillo), library(dplyr)))
clusterExport(cl, c("fit_dfa", "survList"), envir=environment())
tic("run in parallel")
dum <- parLapply(cl, survList, function(x) {
find_dfa_trends(y = x, kmin = 2, kmax = 2, zscore = TRUE, iter = 4000,
chains = 4, control = list(adapt_delta = 0.9,
max_treedepth = 20),
compare_normal = TRUE, variance =  c("equal", "unequal"))
})
stopCluster(cl) #end cluster
toc()
length(survList)
saveRDS(dum, here::here("data", "dfaBayesFits", "coastWide_fitTwoTrends.rds"))
saveRDS(dum, here::here("data", "dfaBayesFits", "coastWide_fitTwoTrends.rds"))
# Check model fits
lapply(seq_along(survList), function(x)
fitMod[[x]]$summary %>%
arrange(looic) %>%
mutate(group = names(survList)[x])
) %>%
do.call(rbind, .)
names(dum[[1]])
names(survList)
class(dum)
# Check model fits
dat <- tibble(
stock_group = names(survList),
mods = dum
)
head(dat)
# Check model fits
dat <- tibble(
stock_group = names(survList),
mods = dum
) %>%
mutate(
model_rank = map(mods, function(x) {
x$summary %>%
arrange(looic)
})
)
dat$model_rank
saveRDS(dum, here::here("data", "dfaBayesFits", "coastWide_fitTwoTrends.rds"))
## linearModelTrends.R
# May 22, 2019
# Script to combine covariate data with modeling information.
# -----
cov <- read.csv(here::here("data/salmonData/survCovariateAnom.csv"),
stringsAsFactors = FALSE)
rotList <- readRDS(here::here("data", "dfaBayesFits",
"coastWide_estTrends_topModels.rds"))
eyDat <- read.csv(here::here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
dum <- readRDS(here::here("data", "dfaBayesFits",
"coastWide_fitThreeTrends.rds"))
dum <- readRDS(here::here("data", "dfaBayesFits",
"coastWide_fitTwoTrends.rds"))
## Group trends
rotList <- lapply(dum, function(x) {
# mod <- dum[[x]]$best_model
rotate_trends(x)
})
listOfPackages <- c("here", "bayesdfa", "tidyverse", "ggplot2", "parallel",
"doParallel", "foreach", "tictoc")
lapply(listOfPackages, library, character.only = TRUE)
#helper functions to fit and post-process DFA
source(here("R/functions/dfaFunctions.R"))
## Group trends
rotList <- lapply(dum, function(x) {
# mod <- dum[[x]]$best_model
rotate_trends(x)
})
glimpse(dum[1])
rotate_trends
dum[[1]]$best_model
rotate_trends(mod)
## Group trends
rotList <- lapply(dum, function(x) {
mod <- dum[[x]]$best_model
rotate_trends(mod)
})
eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
eyDatFull <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
filter(!grp %in% c("oceantype_north", "streamtype_south")) %>%
arrange(desc(lat)) %>%
mutate(stock = factor(stock, unique(stock)),
grp = factor(grp, unique(grp))) %>%
select(-jurisdiction, -lat, -long)  %>%
mutate(grp = fct_recode(grp, "Yearling\nNorth" = "streamtype_north",
"Yearling\nSalish Sea" = "streamtype_SS",
"Subyearling\nSalish Sea" = "oceantype_SS",
"Subyearling\nSouth" = "oceantype_south"))
eyDatFull %>%
filter(aggReg == "SS") %>%
select(stock, stockName, smoltType) %>%
arrange(smoltType) %>%
distinct()
#split into lists
convMat <- function(mat) {
mat %>%
select(OEY, stock, surv) %>%
spread(key = stock, value = surv) %>%
select(-OEY) %>%
as.matrix() %>%
t()
}
survList <- split(eyDatFull, eyDatFull$grp) %>%
lapply(., convMat)
listStkNames <- lapply(survList, function(x) {
name <- rownames(x)
numSeq <- seq(1, length(name), by = 1)
out <- vector(mode = "character", length = length(numSeq))
setNames(name, numSeq)
})
eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
eyDatFull <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
filter(!grp %in% c("oceantype_north", "streamtype_south")) %>%
arrange(desc(lat)) %>%
mutate(stock = factor(stock, unique(stock)),
grp = factor(grp, unique(grp))) %>%
select(-jurisdiction, -lat, -long)  %>%
mutate(grp = fct_recode(grp, "Yearling\nNorth" = "streamtype_north",
"Yearling\nSalish Sea" = "streamtype_SS",
"Subyearling\nSalish Sea" = "oceantype_SS",
"Subyearling\nSouth" = "oceantype_south"))
eyDatFull %>%
filter(aggReg == "SS") %>%
select(stock, stockName, smoltType) %>%
arrange(smoltType) %>%
distinct()
#split into lists
convMat <- function(mat) {
mat %>%
select(OEY, stock, surv) %>%
spread(key = stock, value = surv) %>%
select(-OEY) %>%
as.matrix() %>%
t()
}
survList <- split(eyDatFull, eyDatFull$grp) %>%
lapply(., convMat)
listStkNames <- lapply(survList, function(x) {
name <- rownames(x)
numSeq <- seq(1, length(name), by = 1)
out <- vector(mode = "character", length = length(numSeq))
setNames(name, numSeq)
})
options(mc.cores = parallel::detectCores())
Ncores <- detectCores()
cl <- makeCluster(Ncores - 4) #save four cores
registerDoParallel(cl)
clusterEvalQ(cl, c(library(bayesdfa), library(here), library(Rcpp),
library(RcppArmadillo), library(dplyr)))
clusterExport(cl, c("fit_dfa", "survList"), envir=environment())
tic("run in parallel")
dum <- parLapply(cl, survList, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 4000, chains = 4,
thin = 1, control = list(adapt_delta = 0.97, max_treedepth = 20),
estimate_nu = TRUE)
# find_dfa_trends(y = x, kmin = 3, kmax = 3, zscore = TRUE, iter = 4000,
#                 chains = 4, control = list(adapt_delta = 0.97,
#                                            max_treedepth = 20),
#                 compare_normal = TRUE, variance =  "unequal")
})
stopCluster(cl) #end cluster
toc()
glimpse(dum)
saveRDS(dum, here::here("data", "dfaBayesFits", "coastWide_fitTwoTrends.rds"))
# Check model fits
dat <- tibble(
stock_group = names(survList),
mods = dum
) %>%
mutate(
model_rank = map(mods, function(x) {
x$summary %>%
arrange(looic)
})
)
# Check trends
trendsByGroups <- function(x) {
# mod <- x$best_model
plot_trends(mod)
}
# mod <- dum[[x]]$best_model
rotate_trends(x)
rotList <- lapply(seq_along(dum), function(x) {
# mod <- dum[[x]]$best_model
rotate_trends(x)
})
summary(dum[[1]])
dum$model
dum[[1]]$model
rotList <- lapply(seq_along(dum), function(x) {
# mod <- dum[[x]]$best_model
rotate_trends(x$model)
})
glimpse(rotate_trends())
?rotate_trends
?fit_trends
?plot_trends
saveRDS(dum, here::here("data", "dfaBayesFits", "coastWide_fitTwoTrends.rds"))
summary(dum)
summary(dum[[1]])
rotate_trends(dum[[1]])
## Group trends
rotList <- lapply(dum, function(x) {
rotate_trends(x)
})
saveRDS(rotList, here::here("data", "dfaBayesFits",
"coastWide_estTrends_topModels.rds"))
trendList <- lapply(seq_along(rotList), function(x) {
p <- plot_trendsX(rotList[[x]], oneTrend = TRUE, startYr = 1972) +
labs(title = names(survList)[x], x = "Ocean Entry Year",
y = "Survival Trend") +
samSim::theme_sleekX()
return(p)
})
ggpubr::ggarrange(trendList[[1]], trendList[[2]], trendList[[3]],
trendList[[4]],  ncol = 2, nrow = 2)
eyDatFull %>%
filter(aggReg == "SS") %>%
select(stock, stockName, aggReg, smoltType) %>%
arrange(smoltType) %>%
distinct()
fitList <- lapply(seq_along(dum), function(x) {
mod <- dum[[x]]
p <- if (x == 2) {
plot_fittedX(mod, startYr = 1972, dotCol = "#00BFC4")
} else {
plot_fittedX(mod, startYr = 1972)
}
p <- p +
ggtitle(names(survList)[x]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[x]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
return(p)
})
for(x in seq_along(fitList)) {
fileName <- paste(abbreviate(names(survList)[x], 6), "2TrendFits.png",
sep = "_")
png(here("figs", "dfa", "rangeWideBayes", "3Trends_EqualCov", fileName),
height = 5.25,
width = 6.5, units = "in", res = 300)
plot(fitList[[x]])
dev.off()
}
names(survList)
trendList <- lapply(seq_along(rotList), function(x) {
p <- plot_trendsX(rotList[[x]], oneTrend = TRUE, startYr = 1972) +
labs(title = names(survList)[x], x = "Ocean Entry Year",
y = "Survival Trend") +
lims(y = c(-5, 5)) +
samSim::theme_sleekX()
return(p)
})
ggpubr::ggarrange(trendList[[1]], trendList[[2]], trendList[[3]],
trendList[[4]],  ncol = 2, nrow = 2)
