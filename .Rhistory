data = dat, method = "REML", family=Gamma(link="log"))
AIC(k_h_hj_mod, k_h_hj_modB)
# equivalent model to k_h_hj_mod
mod <- gam(gen_length ~ s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY1_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp", k = 3) +
s(stock, bs = "re"),
data = dat,
method = "REML")
AIC(mod, mod2, mod3, mod4)
# input vectors
excl_pars <- map(mod$smooth, function(x) x$label) %>% unlist
herr0_seq <- seq(min(dat$herr_OEY_z), max(dat$herr_OEY_z), length.out = 75)
herr1_seq <- seq(min(dat$herr_OEY1_z), max(dat$herr_OEY1_z), length.out = 75)
rkw_seq <- seq(min(dat$rkw_z), max(dat$rkw_z), length.out = 75)
# stock-specific averages for each covariate
stock_means <- dat %>%
group_by(stock, a_group2) %>%
summarize(herr_OEY_z = mean(herr_OEY_z),
herr_OEY1_z = mean(herr_OEY1_z),
rkw_z = mean(rkw_z),
.groups = "drop") %>%
ungroup()
# stock-specific averages for each covariate
stock_means <- dat %>%
group_by(stock, a_group2) %>%
summarize(herr_OEY_z = mean(herr_OEY_z),
herr_OEY1_z = mean(herr_OEY1_z),
rkw_z = mean(rkw_z),
.groups = "drop") %>%
ungroup()
glimpse(stock_means)
# make mixed effects predictions using stock mean values
# note that order of covariates in DF varies and is important
mixed_preds_herr0 <- expand.grid(herr_OEY_z = herr0_seq,
stock = unique(dat$stock),
var = "herr0") %>%
left_join(., stock_means %>% select(-herr_OEY_z), by = "stock") %>%
select(herr_OEY_z, herr_OEY1_z, rkw_z, stock, a_group2, var)
mixed_preds_herr1 <- expand.grid(herr_OEY1_z = herr1_seq,
stock = unique(dat$stock),
var = "herr1") %>%
left_join(., stock_means %>% select(-herr_OEY1_z), by = "stock") %>%
select(herr_OEY1_z, herr_OEY_z, rkw_z, stock, a_group2, var)
mixed_preds_rkw <- expand.grid(rkw_z = rkw_seq,
stock = unique(dat$stock),
var = "rkw") %>%
left_join(., stock_means %>% select(-rkw_z), by = "stock") %>%
select(rkw_z, herr_OEY_z, herr_OEY1_z, stock, a_group2, var)
mixed_pred_list1 <- list(herr0 = mixed_preds_herr0,
herr1 = mixed_preds_herr1,
rkw = mixed_preds_rkw)
glimpse(mixed_pred_list1)
fixed_pred_list1 <- map(mixed_pred_list1, function(x) {
#replace stock-specific covariates with 0s
x[, 2] <- 0
x[, 3] <- 0
x %>% select(-stock) %>% distinct()
})
mixed_pred_dat <- map(mixed_pred_list1, function (x) {
gen_pred(mod, x, random = TRUE)
}) %>%
bind_rows()
fixed_pred_dat <- map(fixed_pred_list1, function (x) {
gen_pred(mod, x, random = FALSE)
}) %>%
bind_rows()
ggplot(fixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen, color = a_group2)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Predicted Generation Length") +
facet_wrap(~var)
# plot mixed effects w/ observations
obs_dat <- dat %>%
select(stock, a_group2, gen_length, herr_OEY_z, herr_OEY1_z, rkw_z) %>%
pivot_longer(., cols = c(herr_OEY_z, herr_OEY1_z, rkw_z),
names_to = "var", values_to = "z_value") %>%
mutate(var = fct_recode(as.factor(var),
herr0 = "herr_OEY_z",
herr1 = "herr_OEY1_z",
rkw = "rkw_z"))
ggplot(mixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = z_value, y = gen_length, fill = a_group2),
shape = 21, alpha = 0.5) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Generation Length") +
facet_grid(var~fct_reorder(stock, as.numeric(a_group2)))
# equivalent model to k_h_hj_mod
mod <- gam(gen_length ~ s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY1_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp", k = 3) +
s(stock, bs = "re"),
data = dat,
method = "REML",
family=Gamma(link="log"))
mixed_pred_dat <- map(mixed_pred_list1, function (x) {
gen_pred(mod, x, random = TRUE)
}) %>%
bind_rows()
fixed_pred_dat <- map(fixed_pred_list1, function (x) {
gen_pred(mod, x, random = FALSE)
}) %>%
bind_rows()
# plot fixed effects
ggplot(fixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen, color = a_group2)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Predicted Generation Length") +
facet_wrap(~var)
# plot mixed effects w/ observations
obs_dat <- dat %>%
select(stock, a_group2, gen_length, herr_OEY_z, herr_OEY1_z, rkw_z) %>%
pivot_longer(., cols = c(herr_OEY_z, herr_OEY1_z, rkw_z),
names_to = "var", values_to = "z_value") %>%
mutate(var = fct_recode(as.factor(var),
herr0 = "herr_OEY_z",
herr1 = "herr_OEY1_z",
rkw = "rkw_z"))
ggplot(mixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = z_value, y = gen_length, fill = a_group2),
shape = 21, alpha = 0.5) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Generation Length") +
facet_grid(var~fct_reorder(stock, as.numeric(a_group2)))
modB <- gam(gen_length ~ s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY1_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp", k = 3) +
s(stock, bs = "re") +
a_group2,
data = dat,
method = "REML",
family=Gamma(link="log"))
mixed_pred_dat <- map(mixed_pred_list1, function (x) {
gen_pred(modB, x, random = TRUE)
}) %>%
bind_rows()
# plot mixed effects w/ observations
obs_dat <- dat %>%
select(stock, a_group2, gen_length, herr_OEY_z, herr_OEY1_z, rkw_z) %>%
pivot_longer(., cols = c(herr_OEY_z, herr_OEY1_z, rkw_z),
names_to = "var", values_to = "z_value") %>%
mutate(var = fct_recode(as.factor(var),
herr0 = "herr_OEY_z",
herr1 = "herr_OEY1_z",
rkw = "rkw_z"))
ggplot(mixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = z_value, y = gen_length, fill = a_group2),
shape = 21, alpha = 0.5) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Generation Length") +
facet_grid(var~fct_reorder(stock, as.numeric(a_group2)))
fixed_pred_dat <- map(fixed_pred_list1, function (x) {
gen_pred(modB, x, random = FALSE)
}) %>%
bind_rows()
# plot fixed effects
ggplot(fixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen, color = a_group2)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Predicted Generation Length") +
facet_wrap(~var)
ggplot(mixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = z_value, y = gen_length, fill = a_group2),
shape = 21, alpha = 0.5) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Generation Length") +
facet_grid(var~fct_reorder(stock, as.numeric(a_group2))) +
coord_cartesian(ylim = c(2, 6))
hist(resid(modB))
gam.check(modB)
modC <- gam(gen_length ~ s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp") +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY1_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp") +
s(stock, bs = "re") +
a_group2,
data = dat,
method = "REML",
family=Gamma(link="log"))
modC <- gam(gen_length ~ s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp") +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY1_z, by = stock, m = 1, bs = "tp") +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp") +
s(stock, bs = "re") +
a_group2,
data = dat,
method = "REML",
family=Gamma(link="log"))
modC <- gam(gen_length ~ s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp") +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY1_z, by = stock, m = 1, bs = "tp") +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp") +
s(stock, bs = "re"),
data = dat,
method = "REML",
family=Gamma(link="log"))
AIC(hj_mod1, hj_mod2)
mgcv::gam.check(modB)
ggplot(mixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = z_value, y = gen_length, fill = a_group2),
shape = 21, alpha = 0.5) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Generation Length") +
facet_grid(var~fct_reorder(stock, as.numeric(a_group2))) +
coord_cartesian(ylim = c(2, 6))
glimpse(dat)
dat %>%
select(a_group2, gen_length, herr_OEY_z:rkw_z) %>%
pivot_longer(., cols = -a_group2, names_to = "var", values_to = "val") %>%
glimpse
dat %>%
select(a_group2, gen_length, herr_OEY_z:rkw_z) %>%
pivot_longer(., cols = -a_group2, names_to = "var", values_to = "val") %>%
ggplot(., aes(x = a_grou2, y = val)) +
geom_boxplot() +
ggsidekick::theme_sleek() +
facet_wrap(~var)
dat %>%
select(a_group2, gen_length, herr_OEY_z:rkw_z) %>%
pivot_longer(., cols = -a_group2, names_to = "var", values_to = "val") %>%
ggplot(., aes(x = a_group2, y = val)) +
geom_boxplot() +
ggsidekick::theme_sleek() +
facet_wrap(~var)
# Herring at one year lags: model structure supports model 1 or 4
# fewer parameters in latter and relevant to RKW so use that
h_mod1 <- gam(gen_length ~ s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY1_z, by = stock, m = 1, bs = "tp", k = 3) +
s(stock, bs = "re"),
data = dat, method = "REML", family=Gamma(link="log"))
h_mod2 <- gam(gen_length ~ s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(stock, bs = "re"),
data = dat, method = "REML", family=Gamma(link="log"))
#                 s(stock, bs = "re"),
#               data = dat, method = "REML", family=Gamma(link="log"))
# h_mod3 <- gam(gen_length ~ s(herr_OEY1_z, by = a_group2, m = 2, bs = "tp", k = 3) +
#                 s(herr_OEY1_z, by = stock, m = 1, bs = "tp", k = 3) +
#                 s(stock, bs = "re"),
#               data = dat, method = "REML", family=Gamma(link="log"))
# h_mod4 <- gam(gen_length ~ s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
#                 a_group2 +
#                 s(stock, bs = "re"),
#               data = dat, method = "REML", family=Gamma(link="log"))
AIC(h_mod1, h_mod2)
# Herring at entry - global smooth for juveniles strongly supported
# No region effect because all common
hj_mod1 <- gam(gen_length ~ s(herr_OEY_z, m = 2, bs = "tp", k = 4) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp", k = 4) +
s(stock, bs = "re"),
data = dat, method = "REML", family=Gamma(link="log"))
hj_mod2 <- gam(gen_length ~ s(herr_OEY_z, m = 2, bs = "tp", k = 4) +
s(stock, bs = "re"),
data = dat, method = "REML", family=Gamma(link="log"))
AIC(hj_mod1, hj_mod2)
# RKW - greatest support for model 5 (group specific smooth plus random stock
# effects)
# k_mod1 <- gam(gen_length ~  s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 4) +
#                s(rkw_z, by = stock, m = 1, bs = "tp", k = 4) +
#                s(stock, bs = "re") +
#                a_group2,
#               data = dat, method = "REML", family=Gamma(link="log"))
k_mod1 <- gam(gen_length ~ s(rkw_z, m = 2, bs = "tp", k = 4) +
s(rkw_z, by = stock, m = 1, bs = "tp", k = 4) +
s(stock, bs = "re"),
data = dat, method = "REML", family=Gamma(link="log"))
# k_mod3 <- gam(gen_length ~ s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 4) +
#                 s(stock, bs = "re"),
#               data = dat, method = "REML", family=Gamma(link="log"))
k_mod2 <- gam(gen_length ~ s(rkw_z, m = 2, bs = "tp", k = 4) +
s(stock, bs = "re"),
data = dat, method = "REML", family=Gamma(link="log"))
# k_mod5 <- gam(gen_length ~  s(rkw_z, by = a_group2, m = 2, bs = "tp", k = 4) +
#                 s(rkw_z, by = stock, m = 1, bs = "tp", k = 4) +
#                 s(stock, bs = "re"),
# data = dat, method = "REML", family=Gamma(link="log"))
AIC(k_mod1, k_mod2)
cat_mod <- gam(gen_length ~ a_group2 ,
data = dat, method = "REML", family=Gamma(link="log"))
h_hj_mod <- gam(gen_length ~ s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(stock, bs = "re") +
a_group2 ,
data = dat, method = "REML", family=Gamma(link="log"))
k_hj_mod <- gam(gen_length ~ s(rkw_z, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp", k = 3) +
s(stock, bs = "re"),
data = dat, method = "REML", family=Gamma(link="log"))
k_hj_int_mod <- gam(gen_length ~ te(herr_OEY_z, rkw_z,
bs = c("tp", "tp"), k = c(3, 3), m = 2) +
t2(herr_OEY_z, rkw_z, stock, m = 2,
bs = c("tp", "tp", "re"), k = c(3, 3, n_stks)),
data = dat, method = "REML", family=Gamma(link="log"))
k_h_mod <- gam(gen_length ~ s(rkw_z, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(stock, bs = "re") ,
data = dat, method = "REML", family=Gamma(link="log"))
k_h_int_mod <- gam(gen_length ~ te(herr_OEY1_z, rkw_z,
bs = c("tp", "tp"), k = c(3, 3), m = 2) +
t2(herr_OEY1_z, rkw_z, stock, m = 2,
bs = c("tp", "tp", "re"), k = c(3, 3, n_stks)),
data = dat, method = "REML", family=Gamma(link="log"))
k_h_hj_int_mod <- gam(gen_length ~ te(herr_OEY1_z, rkw_z,
bs = c("tp", "tp"), k = c(3, 3), m = 2) +
t2(herr_OEY1_z, rkw_z, stock, m = 2,
bs = c("tp", "tp", "re"), k = c(3, 3, n_stks)) +
te(herr_OEY_z, rkw_z,
bs = c("tp", "tp"), k = c(3, 3), m = 2) +
t2(herr_OEY_z, rkw_z, stock, m = 2,
bs = c("tp", "tp", "re"), k = c(3, 3, n_stks)),
data = dat,
method = "REML", family=Gamma(link="log"))
AIC(cat_mod, h_mod2, hj_mod1, k_mod1, h_hj_mod, k_hj_mod, k_h_mod, k_h_int_mod,
k_h_hj_mod, k_hj_int_mod, k_h_hj_int_mod)
# equivalent model to k_h_hj_mod
mod <- gam(gen_length ~ s(rkw_z, m = 2, bs = "tp", k = 3) +
s(rkw_z, by = stock, m = 1, bs = "tp", k = 3) +
s(herr_OEY1_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, m = 2, bs = "tp", k = 3) +
s(herr_OEY_z, by = stock, m = 1, bs = "tp", k = 3) +
s(stock, bs = "re"),
data = dat,
method = "REML",
family=Gamma(link="log"))
# stock-specific averages for each covariate
stock_means <- dat %>%
group_by(stock) %>%
summarize(herr_OEY_z = mean(herr_OEY_z),
herr_OEY1_z = mean(herr_OEY1_z),
rkw_z = mean(rkw_z),
.groups = "drop") %>%
ungroup()
# make mixed effects predictions using stock mean values
# note that order of covariates in DF varies and is important
mixed_preds_herr0 <- expand.grid(herr_OEY_z = herr0_seq,
stock = unique(dat$stock),
var = "herr0") %>%
left_join(., stock_means %>% select(-herr_OEY_z), by = "stock") %>%
select(herr_OEY_z, herr_OEY1_z, rkw_z, stock, var)
# make mixed effects predictions using stock mean values
# note that order of covariates in DF varies and is important
mixed_preds_herr0 <- expand.grid(herr_OEY_z = herr0_seq,
stock = unique(dat$stock),
var = "herr0") %>%
left_join(., stock_means %>% select(-herr_OEY_z), by = "stock") %>%
select(herr_OEY_z, herr_OEY1_z, rkw_z, stock, var)
mixed_preds_herr1 <- expand.grid(herr_OEY1_z = herr1_seq,
stock = unique(dat$stock),
var = "herr1") %>%
left_join(., stock_means %>% select(-herr_OEY1_z), by = "stock") %>%
select(herr_OEY1_z, herr_OEY_z, rkw_z, stock, var)
mixed_preds_rkw <- expand.grid(rkw_z = rkw_seq,
stock = unique(dat$stock),
var = "rkw") %>%
left_join(., stock_means %>% select(-rkw_z), by = "stock") %>%
select(rkw_z, herr_OEY_z, herr_OEY1_z, stock, var)
mixed_pred_list1 <- list(herr0 = mixed_preds_herr0,
herr1 = mixed_preds_herr1,
rkw = mixed_preds_rkw)
fixed_pred_list1 <- map(mixed_pred_list1, function(x) {
#replace stock-specific covariates with 0s
x[, 2] <- 0
x[, 3] <- 0
x %>% select(-stock) %>% distinct()
})
mixed_pred_dat <- map(mixed_pred_list1, function (x) {
gen_pred(modB, x, random = TRUE)
}) %>%
bind_rows() %>%
left_join(., dat %>% select(stock, a_group2), by = "stock")
mixed_pred_dat <- map(mixed_pred_list1, function (x) {
gen_pred(mod, x, random = TRUE)
}) %>%
bind_rows() %>%
left_join(., dat %>% select(stock, a_group2), by = "stock")
glimpse(mixed_pred_dat)
fixed_pred_dat <- map(fixed_pred_list1, function (x) {
gen_pred(mod, x, random = FALSE)
}) %>%
bind_rows()
# plot fixed effects
ggplot(fixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up),
alpha = 0.3) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Predicted Generation Length") +
facet_wrap(~var)
# plot fixed effects
ggplot(fixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up),
alpha = 0.3) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Predicted Generation Length") +
facet_wrap(~var)
# plot mixed effects w/ observations
obs_dat <- dat %>%
select(stock, a_group2, gen_length, herr_OEY_z, herr_OEY1_z, rkw_z) %>%
pivot_longer(., cols = c(herr_OEY_z, herr_OEY1_z, rkw_z),
names_to = "var", values_to = "z_value") %>%
mutate(var = fct_recode(as.factor(var),
herr0 = "herr_OEY_z",
herr1 = "herr_OEY1_z",
rkw = "rkw_z"))
ggplot(mixed_pred_dat, aes(x = cov1)) +
geom_line(aes(y = pred_gen)) +
geom_ribbon(aes(ymin = pred_gen_lo, ymax = pred_gen_up, fill = a_group2),
alpha = 0.3) +
geom_point(data = obs_dat, aes(x = z_value, y = gen_length, fill = a_group2),
shape = 21, alpha = 0.5) +
ggsidekick::theme_sleek() +
labs(x = "Standardized Abundance", y = "Generation Length") +
facet_grid(var~fct_reorder(stock, as.numeric(a_group2))) +
coord_cartesian(ylim = c(2, 6))
dat %>%
select(a_group2, gen_length, herr_OEY_z:rkw_z) %>%
pivot_longer(., cols = -a_group2, names_to = "var", values_to = "val") %>%
ggplot(., aes(x = a_group2, y = val)) +
geom_boxplot() +
ggsidekick::theme_sleek() +
facet_wrap(~var)
library(tidyverse); library(here); library(ggplot2); library(viridis)
# load and initial clean
seals <- read.csv(here("data/salmonData/sealPopEst.csv")) %>%
rename(year = "Estimate", mean = "Mean", low = "X2.5th", up = "X97.5th",
reg = "Region")
sogZP <- read.csv(here("data/salmonData/totalPreyAnomalies_SOG.csv"))
viZP <- read.csv(here("data/salmonData/totalPreyAnomalies_sVI.csv"))
newportCope <- read.csv(here("data/salmonData/copeIndices_newport.csv"))
diet <- read.csv(here("data/salmonData/ckSummerDiet.csv"))
whales <- read.csv(here("data/salmonData/rkw_salmon_jun2019.csv"))
npgo <- read.csv(here("data/salmonData/npgo_jul2020.csv"))
colnames(npgo) <- c("year", "month", "npgo")
pdo1 <- read.csv(here("data/salmonData/pdo_aug2020.csv"))
pdo_date_list <- strsplit(as.character(pdo1$Date), "")
pdo <- pdo1 %>%
mutate(
year = map(pdo_date_list, function (x) paste0(x[1:4], sep = "",
collapse = "")) %>%
unlist() %>%
as.numeric(),
month = map(pdo_date_list, function (x) paste0(x[5:6], sep = "",
collapse = "")) %>%
unlist() %>%
as.numeric()
) %>%
select(year, month, pdo = Value)
sstArc <- read.csv(here("data/salmonData/johnstone_indicators.csv"))
names(sstArc)[1] <- "year"
sstArc <- sstArc %>%  select(year, sst_arc = SSTarc)
biIndex <- read.csv(here("data/salmonData/bifurcation-index.csv")) %>%
mutate(bi_stnd = scale(bifurcation_index)[, 1])
# helper function to rename herring data
split_bind <- function(x) {
strsplit(x, "_") %>%
map(., .f = function(y) y[1]) %>%
unlist(.)
}
# for oceanographic indices which have monthly values calculate annual means and
# means for April-July (priming period)
sstArc2 <- sstArc %>%
mutate(year_n = floor(year),
year_c = as.character(year_n),
month_cont = (year - year_n) * 12,
month = ceiling(month_cont)
)
glimpse(sstArc2)
glimpse(sstArc)
tail(sstArc)
glimpse(gen_raw)
gen_raw %>% filter(!is.na(M)) %>% pull(year) %>% max()
gen_raw %>% filter(!is.na(M)) %>% filter(year == "2018")
