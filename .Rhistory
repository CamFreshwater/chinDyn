lapply(listOfPackages, library, character.only = TRUE)
#helper functions to fit and post-process DFA
source(here("R/functions/dfaFunctions.R"))
## Group trends
rotList <- lapply(dum, function(x) {
# mod <- dum[[x]]$best_model
rotate_trends(x)
})
glimpse(dum[1])
rotate_trends
dum[[1]]$best_model
rotate_trends(mod)
## Group trends
rotList <- lapply(dum, function(x) {
mod <- dum[[x]]$best_model
rotate_trends(mod)
})
eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
eyDatFull <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
filter(!grp %in% c("oceantype_north", "streamtype_south")) %>%
arrange(desc(lat)) %>%
mutate(stock = factor(stock, unique(stock)),
grp = factor(grp, unique(grp))) %>%
select(-jurisdiction, -lat, -long)  %>%
mutate(grp = fct_recode(grp, "Yearling\nNorth" = "streamtype_north",
"Yearling\nSalish Sea" = "streamtype_SS",
"Subyearling\nSalish Sea" = "oceantype_SS",
"Subyearling\nSouth" = "oceantype_south"))
eyDatFull %>%
filter(aggReg == "SS") %>%
select(stock, stockName, smoltType) %>%
arrange(smoltType) %>%
distinct()
#split into lists
convMat <- function(mat) {
mat %>%
select(OEY, stock, surv) %>%
spread(key = stock, value = surv) %>%
select(-OEY) %>%
as.matrix() %>%
t()
}
survList <- split(eyDatFull, eyDatFull$grp) %>%
lapply(., convMat)
listStkNames <- lapply(survList, function(x) {
name <- rownames(x)
numSeq <- seq(1, length(name), by = 1)
out <- vector(mode = "character", length = length(numSeq))
setNames(name, numSeq)
})
eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
eyDatFull <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
filter(!grp %in% c("oceantype_north", "streamtype_south")) %>%
arrange(desc(lat)) %>%
mutate(stock = factor(stock, unique(stock)),
grp = factor(grp, unique(grp))) %>%
select(-jurisdiction, -lat, -long)  %>%
mutate(grp = fct_recode(grp, "Yearling\nNorth" = "streamtype_north",
"Yearling\nSalish Sea" = "streamtype_SS",
"Subyearling\nSalish Sea" = "oceantype_SS",
"Subyearling\nSouth" = "oceantype_south"))
eyDatFull %>%
filter(aggReg == "SS") %>%
select(stock, stockName, smoltType) %>%
arrange(smoltType) %>%
distinct()
#split into lists
convMat <- function(mat) {
mat %>%
select(OEY, stock, surv) %>%
spread(key = stock, value = surv) %>%
select(-OEY) %>%
as.matrix() %>%
t()
}
survList <- split(eyDatFull, eyDatFull$grp) %>%
lapply(., convMat)
listStkNames <- lapply(survList, function(x) {
name <- rownames(x)
numSeq <- seq(1, length(name), by = 1)
out <- vector(mode = "character", length = length(numSeq))
setNames(name, numSeq)
})
options(mc.cores = parallel::detectCores())
Ncores <- detectCores()
cl <- makeCluster(Ncores - 4) #save four cores
registerDoParallel(cl)
clusterEvalQ(cl, c(library(bayesdfa), library(here), library(Rcpp),
library(RcppArmadillo), library(dplyr)))
clusterExport(cl, c("fit_dfa", "survList"), envir=environment())
tic("run in parallel")
dum <- parLapply(cl, survList, function(x) {
fit_dfa(y = x, num_trends = 2, zscore = TRUE, iter = 4000, chains = 4,
thin = 1, control = list(adapt_delta = 0.97, max_treedepth = 20),
estimate_nu = TRUE)
# find_dfa_trends(y = x, kmin = 3, kmax = 3, zscore = TRUE, iter = 4000,
#                 chains = 4, control = list(adapt_delta = 0.97,
#                                            max_treedepth = 20),
#                 compare_normal = TRUE, variance =  "unequal")
})
stopCluster(cl) #end cluster
toc()
glimpse(dum)
saveRDS(dum, here::here("data", "dfaBayesFits", "coastWide_fitTwoTrends.rds"))
# Check model fits
dat <- tibble(
stock_group = names(survList),
mods = dum
) %>%
mutate(
model_rank = map(mods, function(x) {
x$summary %>%
arrange(looic)
})
)
# Check trends
trendsByGroups <- function(x) {
# mod <- x$best_model
plot_trends(mod)
}
# mod <- dum[[x]]$best_model
rotate_trends(x)
rotList <- lapply(seq_along(dum), function(x) {
# mod <- dum[[x]]$best_model
rotate_trends(x)
})
summary(dum[[1]])
dum$model
dum[[1]]$model
rotList <- lapply(seq_along(dum), function(x) {
# mod <- dum[[x]]$best_model
rotate_trends(x$model)
})
glimpse(rotate_trends())
?rotate_trends
?fit_trends
?plot_trends
saveRDS(dum, here::here("data", "dfaBayesFits", "coastWide_fitTwoTrends.rds"))
summary(dum)
summary(dum[[1]])
rotate_trends(dum[[1]])
## Group trends
rotList <- lapply(dum, function(x) {
rotate_trends(x)
})
saveRDS(rotList, here::here("data", "dfaBayesFits",
"coastWide_estTrends_topModels.rds"))
trendList <- lapply(seq_along(rotList), function(x) {
p <- plot_trendsX(rotList[[x]], oneTrend = TRUE, startYr = 1972) +
labs(title = names(survList)[x], x = "Ocean Entry Year",
y = "Survival Trend") +
samSim::theme_sleekX()
return(p)
})
ggpubr::ggarrange(trendList[[1]], trendList[[2]], trendList[[3]],
trendList[[4]],  ncol = 2, nrow = 2)
eyDatFull %>%
filter(aggReg == "SS") %>%
select(stock, stockName, aggReg, smoltType) %>%
arrange(smoltType) %>%
distinct()
fitList <- lapply(seq_along(dum), function(x) {
mod <- dum[[x]]
p <- if (x == 2) {
plot_fittedX(mod, startYr = 1972, dotCol = "#00BFC4")
} else {
plot_fittedX(mod, startYr = 1972)
}
p <- p +
ggtitle(names(survList)[x]) +
facet_wrap("ID", labeller = as_labeller(listStkNames[[x]]),
scales = "free_y") +
samSim::theme_sleekX(axisSize = 9)
return(p)
})
for(x in seq_along(fitList)) {
fileName <- paste(abbreviate(names(survList)[x], 6), "2TrendFits.png",
sep = "_")
png(here("figs", "dfa", "rangeWideBayes", "3Trends_EqualCov", fileName),
height = 5.25,
width = 6.5, units = "in", res = 300)
plot(fitList[[x]])
dev.off()
}
names(survList)
trendList <- lapply(seq_along(rotList), function(x) {
p <- plot_trendsX(rotList[[x]], oneTrend = TRUE, startYr = 1972) +
labs(title = names(survList)[x], x = "Ocean Entry Year",
y = "Survival Trend") +
lims(y = c(-5, 5)) +
samSim::theme_sleekX()
return(p)
})
ggpubr::ggarrange(trendList[[1]], trendList[[2]], trendList[[3]],
trendList[[4]],  ncol = 2, nrow = 2)
library(tidyverse)
eyDat <- read.csv(here::here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
library(lme4)
library(brms)
seals <- read.csv(here::here("data/salmonData/sealPopEst.csv"),
stringsAsFactors = FALSE) %>%
rename(year = "Estimate", mean = "Mean", low = "X2.5th", up = "X97.5th",
reg = "Region") %>%
mutate(mean = mean / 1000) %>%
filter(reg == "SOG")
# quick mixed model evaluating correlation between M and seal abundance
ss <- eyDat %>%
mutate(
M = -log(surv),
agg_reg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)
) %>%
filter(agg_reg == "SS") %>%
rename(year = OEY) %>%
left_join(.,
seals %>%
select(year, mean_seal = mean),
by = "year")
# plots
avg <- ss %>%
group_by(year) %>%
summarize(mean_M = mean(M, na.rm = T),
mean_seal = mean(mean_seal))
# simple models
# average model
avg_mod <- lm(mean_M ~ mean_seal, data = avg)
ss1 <- brm(M ~ mean_seal + (1 | stock), data = ss,
warmup = 750, iter = 2000,
cores = 4, chains = 4,
seed = 123)
ss2 <- brm(M ~ mean_seal + (1 + mean_seal | stock), data = ss,
warmup = 750, iter = 2000,
cores = 4, chains = 4,
seed = 123)
ss2 <- brm(M ~ mean_seal + (1 + mean_seal | stock), data = ss,
warmup = 25, iter = 100,
cores = 1, chains = 1,
seed = 123)
ss2 <- brm(M ~ mean_seal + (1 + mean_seal | stock), data = ss,
warmup = 750, iter = 2000,
cores = 4, chains = 4,
seed = 123)
ss2 <- brm(M ~ mean_seal + (1 + mean_seal | stock), data = ss,
warmup = 750, iter = 2000,
cores = 4, chains = 4,
seed = 456)
summary(ss2)$fixed
mod_list <- list(ss1, ss2)
coef(ss2)
x <- ss1
x %>%
ggs
install.packages(ggmcmc)
install.packages("ggmcmc")
x %>%
ggmcmc::ggs %>%
filter(Parameter %in% c("Intercept", "mean_seal"))
x %>%
ggmcmc::ggs()
x %>%
ggmcmc::ggs() %>%
filter(Parameter %in% c("Intercept", "mean_seal"))
x %>%
ggmcmc::ggs() %>%
filter(Parameter %in% c("b_Intercept", "b_mean_seal"))
x %>%
ggmcmc::ggs() %>%
filter(Parameter %in% c("b_Intercept", "b_mean_seal")) %>%
ggplot(.,
aes(x   = Iteration,
y   = value,
col = as.factor(Chain)))+
geom_line() +
geom_vline(xintercept = 750)+
facet_grid(Parameter ~ . ,
scale  = 'free_y',
switch = 'y')
# diagnostics
map(mod_list, function(x) {
x %>%
ggmcmc::ggs() %>%
filter(Parameter %in% c("b_Intercept", "b_mean_seal")) %>%
ggplot(.,
aes(x   = Iteration,
y   = value,
col = as.factor(Chain)))+
geom_line() +
geom_vline(xintercept = 750)+
facet_grid(Parameter ~ . ,
scale  = 'free_y',
switch = 'y')
})
library(rethinking)
# sample from posterior
post <- posterior_samples(ss1, add_chain = T)
glimpse(post)
?geom_line
ss %>%
group_by(stock) %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_fitted_draws(ss2, n = 100) %>%
glimpse()
ss %>%
group_by(stock) %>%
modelr::data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_fitted_draws(ss2, n = 100) %>%
glimpse()
library(tidyr)
library(modelr)
ss %>%
group_by(stock) %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_fitted_draws(ss2, n = 100) %>%
glimpse()
library(tidybayes)
mtcars %>%
group_by(cyl) %>%
data_grid(hp = seq_range(hp, n = 101)) %>%
add_fitted_draws(m_mpg, n = 100) %>%
ggplot(aes(x = hp, y = mpg, color = ordered(cyl))) +
geom_line(aes(y = .value, group = paste(cyl, .draw)), alpha = .1) +
geom_point(data = mtcars) +
scale_color_brewer(palette = "Dark2")
ss %>%
group_by(stock) %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_fitted_draws(ss2, n = 100) %>%
glimpse()
ss %>%
group_by(stock) %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_fitted_draws(ss2, n = 100) %>%
ggplot(aes(x = mean_seal, y = M, color = stock)) +
geom_line(aes(y = .value, group = paste(stock, .draw)), alpha = 0.1) +
geom_point(data = ss)
ggplot(data = post_pred, aes(x = mean_seal, y = M, color = stock)) +
geom_line(aes(y = .value, group = paste(stock, .draw)), alpha = 0.1) +
geom_point(data = ss) +
facet_wrap(~stock)
# sample from posterior
post_pred <- ss %>%
group_by(stock) %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_fitted_draws(ss2, n = 100)
ggplot(data = post_pred, aes(x = mean_seal, y = M, color = stock)) +
geom_line(aes(y = .value, group = paste(stock, .draw)), alpha = 0.1) +
geom_point(data = ss) +
facet_wrap(~stock)
glimpse(post_pred)
post_pred_mu <- ss %>%
# group_by(stock) %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_fitted_draws(ss2, n = 100)
post_mu <- posterior_samples(ss2, add_chain = T)
glimpse(post_mu)
post_mu <- posterior_samples(ss2, add_chain = T) %>%
select(iter, chain, b_Intercept, b_mean_seal)
glimpse(post_mu)
post_mu <- posterior_samples(ss2, add_chain = T) %>%
select(iter, chain, b_Intercept, b_mean_seal, sd_stock__Intercept,
sd_stock__mean_seal) %>%
pivot_longer(b_Intercept:sd_stock__mean_seal, names_to = "par",
values_to = "est")
glimpse(post_mu)
ss %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_predicted_draws(ss2)
ss %>%
select(-stock) %>%
data_grid(mean_seal = seq_range(mean_seal, n = 101)) %>%
add_predicted_draws(ss2) %>%
ggplot(aes(x = hp, y = mpg)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), color = brewer.pal(5, "Blues")[[5]]) +
geom_point(data = mtcars) +
scale_fill_brewer() +
facet_grid(. ~ cyl, space = "free_x", scales = "free_x")
ggplot(data = post_pred, aes(x = mean_seal, y = M, color = stock)) +
geom_line(aes(y = .value, group = paste(stock, .draw)), alpha = 0.1) +
geom_point(data = ss) +
facet_wrap(~stock)
# average fixed effects predictions
preds <- tibble(mean_seal = seq(min(ss$mean_seal), max(ss$mean_seal),
length.out = 100)) %>%
add_fitted_draws(ss2,
re_formula = NA,
scale = "response", n = 1e3)
max(ss$mean_seal)
# average fixed effects predictions
preds <- tibble(mean_seal = seq(min(ss$mean_seal, na.rm = T),
max(ss$mean_seal, na.rm = T),
length.out = 100)) %>%
add_fitted_draws(ss2,
re_formula = NA,
scale = "response", n = 1e3)
glimpse(preds)
ggplot(pres, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5)
ggplot(preds, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5)
pred_mean_fe <- pred_fe %>%
group_by(mean_seal) %>%
summarize(.value = mean(.value))
# average fixed effects predictions
pred_fe <- tibble(mean_seal = seq(min(ss$mean_seal, na.rm = T),
max(ss$mean_seal, na.rm = T),
length.out = 100)) %>%
add_fitted_draws(ss2,
re_formula = NA,
scale = "response", n = 1e3)
pred_mean_fe <- pred_fe %>%
group_by(mean_seal) %>%
summarize(.value = mean(.value))
ggplot(pred_fe, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(pred_mean_fe, color = "red", lwd = 2)
ggplot(pred_fe, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_fe, color = "red", lwd = 2)
ggplot(pred_fe, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_fe, color = "black", lwd = 2)
# average fixed effects predictions
pred_re <- crossing(mean_seal = seq(min(ss$mean_seal, na.rm = T),
max(ss$mean_seal, na.rm = T),
length.out = 100),
stock = unique(ss$stock)) %>%
add_fitted_draws(ss2,
scale = "response", n = 1e3)
pred_mean_re <- pred_re %>%
group_by(mean_seal) %>%
summarize(.value = mean(.value))
ggplot(pred_re, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_re, color = "black", lwd = 2)
ggplot(data = post_pred, aes(x = mean_seal, y = M, color = stock)) +
geom_line(aes(y = .value, group = paste(stock, .draw)), alpha = 0.1) +
geom_point(data = ss) +
facet_wrap(~stock)
ggplot(pred_fe, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_fe, color = "black", lwd = 2)
fixed_pred_plot <- ggplot(pred_fe, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_fe, color = "black", lwd = 2)
fixed_pred_plot
ggplot(data = post_pred, aes(x = mean_seal, y = M, color = stock)) +
geom_line(aes(y = .value, group = paste(stock, .draw)), alpha = 0.1) +
geom_point(data = ss) +
labs(x = "Seal Abundance")
facet_wrap(~stock)
stock_spec <- ggplot(data = post_pred, aes(x = mean_seal, y = M, color = stock)) +
geom_line(aes(y = .value, group = paste(stock, .draw)), alpha = 0.1) +
geom_point(data = ss) +
labs(x = "Seal Abundance") +
facet_wrap(~stock)
stock_spec
mixed_pred_plot <- ggplot(pred_re, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_re, color = "black", lwd = 2) +
labs(x = "Seal Abundance", y = "Predicted M")
mixed_pred_plot
fixed_pred_plot
mixed_pred_plot
pdf(here::here("figs", "seal_mixed_model.pdf"))
stock_spec
fixed_pred_plot
mixed_pred_plot
dev.off()
?labs
fixed_pred_plot <- ggplot(pred_fe, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_fe, color = "black", lwd = 2) +
labs(x = "Seal Abundance", y = "Predicted M",
title = "Fixed Only Posterior Predictions")
mixed_pred_plot <- ggplot(pred_re, aes(x = mean_seal, y = .value)) +
stat_interval(alpha = 0.5) +
geom_line(data = pred_mean_re, color = "black", lwd = 2) +
labs(x = "Seal Abundance", y = "Predicted M",
title = "Fixed and Random Posterior Predictions")
pdf(here::here("figs", "seal_mixed_model.pdf"))
stock_spec
fixed_pred_plot
mixed_pred_plot
dev.off()
