arrange(region) %>%
mutate(stock = factor(stock, unique(stock))) %>%
select(-stockName, -jurisdiction, -lat, -long)
eyMatFull <- eyDatFull %>%
select(OEY, stock, surv) %>%
spread(key = stock, value = surv) %>%
select(-OEY) %>%
as.matrix() %>%
t()
entryYrs <- unique(eyDatTrim$OEY)
colnames(eyMatFull) <- entryYrs
nStks <- nrow(eyMatFull)
nStks
nYrs <- ncol(eyMatFull)
stkID <- rownames(eyMatFull)
tic()
fitModelsAll <- find_dfa_trends(y = eyMatFull, iter = 3500, kmin = 1, kmax = 4,
chains = 4, compare_normal = TRUE, zscore = TRUE,
variance =  "unequal",
control = list(adapt_delta = 0.95,
max_treedepth = 20))
toc()
saveRDS(fitModelsAll, here::here("data", "dfaBayesFits",
"fullBasin_findTrends.rds"))
fitModelsAll$summary
best_model
best_model
?best_model
bayesdfa::best_model
?bayesdfa::best_model
?bayesdfa::fit_dfa
str(fitModels)
r4 <- rotate_trends(f4)
plot_loadings(r4)
plot_loadings(r4) +
ylim(-3, 3)
fitModels$summary
tic()
fitModels <- find_dfa_trends(y = eyMat, iter = 3000, kmin = 1, kmax = 3,
chains = 4, compare_normal = TRUE, zscore = TRUE,
variance =  "unequal",
control = list(adapt_delta = 0.95,
max_treedepth = 20))
#focus on subset of BC pops for initial analyses
eyDatTrim <- eyDat %>%
filter(region %in% c("LFR", "MFR", "UFR", "ECVI", "SPGSD", "NPGSD")) %>%
group_by(stock) %>%
# mutate(survZ = as.numeric(scale(surv))) %>%
ungroup(stock) %>%
arrange(region) %>%
mutate(stock = factor(stock, unique(stock))) %>%
select(-stockName, -jurisdiction, -lat, -long)
eyMat <- eyDatTrim %>%
select(OEY, stock, surv) %>%
spread(key = stock, value = surv) %>%
select(-OEY) %>%
as.matrix() %>%
t()
entryYrs <- unique(eyDatTrim$OEY)
colnames(eyMat) <- entryYrs
nStks <- nrow(eyMat)
nYrs <- ncol(eyMat)
stkID <- rownames(eyMat)
tic()
fitModels <- find_dfa_trends(y = eyMat, iter = 3000, kmin = 1, kmax = 3,
chains = 4, compare_normal = TRUE, zscore = TRUE,
variance =  "unequal",
control = list(adapt_delta = 0.95,
max_treedepth = 20))
dim(eyMat)
data.frame(normal = c(FALSE, TRUE),
var = c("unequal", "equal")) %>%
split(., seq(nrow(.)))
datIn <- data.frame(normal = c(FALSE, TRUE),
var = c("unequal", "equal")) %>%
split(., seq(nrow(.)))
Ncores <- detectCores()
cl <- makeCluster(Ncores) #save two cores
registerDoParallel(cl)
clusterEvalQ(cl, c(library(bayesdfa), library(here), library(Rcpp),
library(RcppArmadillo)))
eyMat[1:5, ]
Ncores <- detectCores()
cl <- makeCluster(Ncores) #save two cores
registerDoParallel(cl)
clusterEvalQ(cl, c(library(bayesdfa), library(here), library(Rcpp),
library(RcppArmadillo)))
clusterExport(cl, c("eyMat", "find_dfa_trends", "datIn"),
envir=environment())
tic("run in parallel")
dum <- parLapply(cl, datIn, function(x) {
find_dfa_trends(y = eyMat[1:5, ], iter = 100, kmin = 1, kmax = 1,
chains = 1, compare_normal = x$normal, zscore = TRUE,
variance =  x$var,
control = list(adapt_delta = 0.8, max_treedepth = 20))
})
stopCluster(cl) #end cluster
toc()
str(dum)
Ncores <- detectCores()
cl <- makeCluster(Ncores) #save two cores
registerDoParallel(cl)
clusterEvalQ(cl, c(library(bayesdfa), library(here), library(Rcpp),
library(RcppArmadillo)))
clusterExport(cl, c("eyMat", "find_dfa_trends", "datIn"),
envir=environment())
tic("run in parallel")
dum <- parLapply(cl, datIn, function(x) {
find_dfa_trends(y = eyMat, iter = 3500, kmin = 1, kmax = 3,
chains = 1, compare_normal = x$normal, zscore = TRUE,
variance =  x$var,
control = list(adapt_delta = 0.96, max_treedepth = 20))
})
fitModels$summary
f4 <- fitModels$best_model
datIn <- data.frame(normal = c(FALSE, TRUE),
var = c("unequal", "equal")) %>%
split(., seq(nrow(.)))
Ncores <- detectCores()
cl <- makeCluster(Ncores) #save two cores
registerDoParallel(cl)
clusterEvalQ(cl, c(library(bayesdfa), library(here), library(Rcpp),
library(RcppArmadillo)))
clusterExport(cl, c("eyMat", "find_dfa_trends", "datIn"),
envir=environment())
tic("run in parallel")
dum <- parLapply(cl, datIn, function(x) {
find_dfa_trends(y = eyMat, iter = 3500, kmin = 1, kmax = 3,
chains = 4, compare_normal = x$normal, zscore = TRUE,
variance =  x$var,
control = list(adapt_delta = 0.96, max_treedepth = 20))
})
stopCluster(cl) #end cluster
toc()
81438/60
(81438/60)/60
str(dum)
dum[[1]]$summary
dum[[2]]$summary
rbind(dum[[1]]$summary, dum[[2]]$summary)
rbind(dum[[1]]$summary, dum[[2]]$summary) %>%
arrange(looic)
dum[[1]]$summary
dum[[1]]$summary
dum[[2]]$summary
dum[[1]]$summary
indMod <- dum[[1]]$best_model
equalMod <- dum[[2]]$best_model
shinystan::launch_shinystan(indModel$model)
indModel$model
dum[[1]]$best_model
indMod <- dum[[1]]$best_model
equalMod <- dum[[2]]$best_model
shinystan::launch_shinystan(indModel$model)
f4$model
indMod$model
shinystan::launch_shinystan(indModel$model)
is_converged(indMod$model)
is_converged(indMod, threshold = 1.05)
shinystan::launch_shinystan(indModel$model)
shinystan::launch_shinystan(f4$model)
shinystan::launch_shinystan(indMod$model)
shinystan::launch_shinystan(equalMod$model)
indTrends <- rotate_trends(indMod)
plot_trends(indTrends)
expTrends <- rotate_trends(expMod)
equalTrends <- rotate_trends(equalMod)
plot_trends(equalTrends)
indR <- rotate_trends(indMod)
indTrends <- plot_trends(indTrends)
equalR <- rotate_trends(equalMod)
equalTrends <- plot_trends(equalTrends)
?ggarrange
?ggpubr::ggarrange
ggpubr::ggarrange(indTrends, equalTrends, ncol = 1, nrow = 2)
plot_loadings(indR) +
ylim(-3, 3)
plot_loadings(indR) +
ylim(-2, 2)
equalLoadings <- plot_loadings(equalR) +
ylim(-2, 2)
ggpubr::ggarrange(indLoadings, equalLoadings, ncol = 1, nrow = 2)
indLoadings <- plot_loadings(indR) +
ylim(-2, 2)
equalLoadings <- plot_loadings(equalR) +
ylim(-2, 2)
ggpubr::ggarrange(indLoadings, equalLoadings, ncol = 1, nrow = 2)
saveRDS(dum, here::here("data", "dfaBayesFits",
"salishSea_diffCorStructures_findTrends.rds"))
ggpubr::ggarrange(indTrends, equalTrends, ncol = 1, nrow = 2)
plot_fitted(indMod)
plot_fitted(indMod) %>%
ggtitle("Independent Observation Error")
?plot_fitted
plot_fitted(indMod, names = c("a"))
plot_fitted(indMod)
png(here("figs", "dfa", "salishSea_3trend_indCor_fits.png"), height = 4,
width = 5.5, units = "in", res = 300)
plot_fitted(indMod)
dev.off()
png(here("figs", "dfa", "salishSea_3trend_indCor_fits.png"), height = 5,
width = 6, units = "in", res = 300)
plot_fitted(indMod)
dev.off()
png(here("figs", "dfa", "salishSea_3trend_eqCor_fits.png"), height = 5,
width = 6, units = "in", res = 300)
plot_fitted(indMod)
dev.off()
png(here("figs", "dfa", "salishSea_3trend_eqCor_fits.png"), height = 5,
width = 6, units = "in", res = 300)
plot_fitted(equalMod)
dev.off()
ggpubr::ggarrange(indLoadings, equalLoadings, ncol = 1, nrow = 2)
dummm <- load(here::here("data", "dfaBayesFits",
)
()
}
dummm <- load(here::here("data", "dfaBayesFits",
"salishSea_diffCorStructures_findTrends.rds"))
dummm <- readRDS(here::here("data", "dfaBayesFits",
"salishSea_diffCorStructures_findTrends.rds"))
rbind(dummm[[1]]$summary, dummm[[2]]$summary) %>%
arrange(looic)
subDir <- "full_OEY"
# byDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_BY.csv"),
#                   stringsAsFactors = FALSE)
# eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
#                   stringsAsFactors = FALSE)
source("C:/github/chinDyn/R/functions/dfaFunctions.R")
summ <- getTopDFA(subDir)
summ[[2]]
listOfPackages <- c("here", "MARSS", "tidyverse", "ggplot2", "parallel",
"doParallel", "foreach", "tictoc")
lapply(listOfPackages, require, character.only = TRUE)
eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
eyDat <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
group_by(stock) %>%
mutate(survZ = as.numeric(scale(surv))) %>%
ungroup(stock) %>%
arrange(grp) %>%
mutate(stock = factor(stock, unique(stock))) %>%
select(-stockName, -jurisdiction, -lat, -long)
subDir <- "full_OEY"
inRSeq <- c("diagonal and equal", "diagonal and unequal", "equalvarcov")
inMList <- list(1, 2, 3, 4, 5)
subDir <- "full_OEY"
summ <- getTopDFA(subDir)
summ[[2]]
summ <- getTopDFA(subDir)
# eyDat <- read.csv("C:/github/chinDyn/data/salmonData/CLEANcwtInd_age2SR_OEY.csv",
#                   stringsAsFactors = FALSE)
source("C:/github/chinDyn/R/functions/dfaFunctions.R")
summ <- getTopDFA(subDir)
summ
getTopDFA
mod1 <- readRDS(here::here("data", "dfaFits", subDir,
"fitMod.2.equalvarcov.rds"))
summary(mod1)
estZ <- coef(mod1, type = "matrix")$Z
#retrieve rotated matrix
invH <- if (ncol(estZ) > 1) {
varimax(estZ)$rotmat
} else if (ncol(estZ) == 1) {
1
}
stkID
eyDat <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
group_by(stock) %>%
mutate(survZ = as.numeric(scale(surv))) %>%
ungroup(stock) %>%
arrange(grp) %>%
mutate(stock = factor(stock, unique(stock))) %>%
select(-stockName, -jurisdiction, -lat, -long)
## Initial time series plots
plotSurvZ <- function(group) {
dum <- eyDat %>%
filter(grp == group)
q <- ggplot(dum, aes(x = OEY, y = survZ, colour = region)) +
geom_line() +
samSim::theme_sleekX() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(group) +
facet_wrap(~stock)
print(q)
}
grpSeq <- unique(eyDat$grp)
sapply(grpSeq, function(x) plotSurvZ(x))
### Fit DFA
#Convert to matrices (necessary for DFA)
eyMatZ <- eyDat %>%
select(OEY, stock, survZ) %>%
spread(key = stock, value = survZ) %>%
select(-OEY) %>%
as.matrix() %>%
t()
entryYrs <- unique(eyDat$OEY)
colnames(eyMatZ) <- entryYrs
nStks <- nrow(eyMatZ)
nYrs <- ncol(eyMatZ)
stkID <- rownames(eyMatZ)
eyDat <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
group_by(stock) %>%
mutate(survZ = as.numeric(scale(surv))) %>%
ungroup(stock) %>%
arrange(grp) %>%
mutate(stock = factor(stock, unique(stock))) %>%
select(-stockName, -jurisdiction, -lat, -long)
head(eyDat)
# byDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_BY.csv"),
#                   stringsAsFactors = FALSE)
eyDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
head(eyDat)
eyDat <- eyDat %>%
mutate(lat = as.numeric(lat),
long = as.numeric(long),
aggReg = case_when(
(is.na(lat)) ~ "north",
(lat > 52 & !region == "UFR") ~ "north",
(region %in% c("JFUCA", "LCOLR", "MCOLR", "ORCST", "UCOLR", "WACST",
"WCVI")) ~ "south",
TRUE ~ "SS"
)) %>%
mutate(grp = paste(smoltType, aggReg, sep = "_")) %>%
group_by(stock) %>%
mutate(survZ = as.numeric(scale(surv))) %>%
ungroup(stock) %>%
arrange(grp) %>%
mutate(stock = factor(stock, unique(stock))) %>%
select(-stockName, -jurisdiction, -lat, -long)
# byDat <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_BY.csv"),
#                   stringsAsFactors = FALSE)
eyDatF <- read.csv(here("data/salmonData/CLEANcwtInd_age2SR_OEY.csv"),
stringsAsFactors = FALSE)
eyMatZ <- eyDat %>%
select(OEY, stock, survZ) %>%
spread(key = stock, value = survZ) %>%
select(-OEY) %>%
as.matrix() %>%
t()
entryYrs <- unique(eyDat$OEY)
colnames(eyMatZ) <- entryYrs
nStks <- nrow(eyMatZ)
nYrs <- ncol(eyMatZ)
stkID <- rownames(eyMatZ)
stkID
estZ <- coef(mod1, type = "matrix")$Z
#retrieve rotated matrix
invH <- if (ncol(estZ) > 1) {
varimax(estZ)$rotmat
} else if (ncol(estZ) == 1) {
1
}
rotZ <- rotateLoadings(zIn = estZ, H = invH, stkNames = stkID,
survDat = eyDat) %>%
inner_join(byDatTrim %>% select(stock, smoltType, adultRunTiming),
by = "stock") %>%
distinct()
rotZ <- rotateLoadings(zIn = estZ, H = invH, stkNames = stkID,
survDat = eyDat) %>%
inner_join(eyDat %>% select(stock, smoltType, adultRunTiming),
by = "stock") %>%
distinct()
head(rotZ)
ggplot(rotZ, aes(x = stock, y = loading, fill = region)) +
geom_col() +
theme_sleekX(axisSize = 9, legendSize = 0.7) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~trend)
ggplot(rotZ, aes(x = stock, y = loading, fill = region)) +
geom_col() +
samSim::theme_sleekX(axisSize = 9, legendSize = 0.7) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~trend)
head(eyDat)
grpSeq
rotZ <- rotateLoadings(zIn = estZ, H = invH, stkNames = stkID,
survDat = eyDat) %>%
inner_join(eyDat %>% select(stock, grp),
by = "stock") %>%
distinct()
ggplot(rotZ, aes(x = stock, y = loading, fill = grp)) +
geom_col() +
samSim::theme_sleekX(axisSize = 9, legendSize = 0.7) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~trend)
rotZ <- rotateLoadings(zIn = estZ, H = invH, stkNames = stkID,
survDat = eyDat) %>%
inner_join(eyDat %>% select(stock, grp),
by = "stock") %>%
distinct() %>%
arrange(grp) %>%
mutate(stock = factor(stock, unique(stock)))
ggplot(rotZ, aes(x = stock, y = loading, fill = grp)) +
geom_col() +
samSim::theme_sleekX(axisSize = 9, legendSize = 0.7) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~trend)
rotTrends <- rotateTrends(modIn = mod1, H = invH)
ggplot(rotTrends, aes(x = year, y = est)) +
geom_line() +
theme_sleekX() +
geom_hline(yintercept = 0, colour = "red") +
facet_wrap(~trend)
rotTrends <- rotateTrends(modIn = mod1, H = invH)
##Function to rotate estimated trends
rotateTrends <- function(modIn, H){
(solve(H) %*% modIn$states) %>%
t() %>%
as.data.frame() %>%
mutate(year = entryYrs) %>%
gather(key = "trend", value = "est", -year) %>%
mutate(trend = as.numeric(as.factor(trend)))
}
rotTrends <- rotateTrends(modIn = mod1, H = invH)
ggplot(rotTrends, aes(x = year, y = est)) +
geom_line() +
theme_sleekX() +
geom_hline(yintercept = 0, colour = "red") +
facet_wrap(~trend)
rotTrends <- rotateTrends(modIn = mod1, H = invH)
ggplot(rotTrends, aes(x = year, y = est)) +
geom_line() +
samSim::theme_sleekX() +
geom_hline(yintercept = 0, colour = "red") +
facet_wrap(~trend)
modOutCI <- broom::augment(mod1, interval = "confidence") %>%
dplyr::rename(stock = .rownames) %>%
inner_join(byDatTrim %>% select(stock, region), by = "stock") %>%
distinct() %>%
arrange(grp) %>%
mutate(year = t + 1984, #add so that year is correct
stock = factor(stock, unique(stock)))
ggplot(modOutCI) +
geom_line(aes(x = year, y = .fitted)) +
geom_point(aes(x = year, y = y, colour = region)) +
geom_ribbon(aes(x = year, ymin = .conf.low, ymax = .conf.up), linetype = 2,
alpha = 0.2) +
facet_wrap(~stock)
modOutCI <- broom::augment(mod1, interval = "confidence") %>%
dplyr::rename(stock = .rownames) %>%
inner_join(eyDat %>% select(stock, region, grp), by = "stock") %>%
distinct() %>%
arrange(grp) %>%
mutate(year = t + 1984, #add so that year is correct
stock = factor(stock, unique(stock)))
ggplot(modOutCI) +
geom_line(aes(x = year, y = .fitted)) +
geom_point(aes(x = year, y = y, colour = region)) +
geom_ribbon(aes(x = year, ymin = .conf.low, ymax = .conf.up), linetype = 2,
alpha = 0.2) +
facet_wrap(~stock)
ggplot(modOutCI) +
geom_line(aes(x = year, y = .fitted)) +
geom_point(aes(x = year, y = y, colour = grp)) +
geom_ribbon(aes(x = year, ymin = .conf.low, ymax = .conf.up), linetype = 2,
alpha = 0.2) +
facet_wrap(~stock)
summ[[2]]
## Explore fit of top model
mod1 <- summ[[1]]
estZ <- coef(mod1, type = "matrix")$Z
#retrieve rotated matrix
invH <- if (ncol(estZ) > 1) {
varimax(estZ)$rotmat
} else if (ncol(estZ) == 1) {
1
}
rotZ <- rotateLoadings(zIn = estZ, H = invH, stkNames = stkID,
survDat = eyDat) %>%
inner_join(eyDat %>% select(stock, grp),
by = "stock") %>%
distinct() %>%
arrange(grp) %>%
mutate(stock = factor(stock, unique(stock)))
ggplot(rotZ, aes(x = stock, y = loading, fill = grp)) +
geom_col() +
samSim::theme_sleekX(axisSize = 9, legendSize = 0.7) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~trend)
.libPaths()
